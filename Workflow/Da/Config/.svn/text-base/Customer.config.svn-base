<?xml version="1.0" encoding="utf-8"?>
<sqlMap namespace="Customer" xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:noNamespaceSchemaLocation="SqlMap.xsd">
	<resultMaps>
		<resultMap id="SelectParticularCustomerResult" class="Customer">
			<result property="Id" column="ID" />
			<result property="Name" column="NAME" />
			<result property="LastLinkMan" column="LAST_LINK_MAN"/>
			<result property="LastTelNo" column="LAST_TEL_NO"/>
			<result property="Address" column="ADDRESS"/>
			<result property="Memo" column="MEMO"/>
		</resultMap>
		<resultMap id="SelectWithoutConsumeCustomer" class="Customer">
			<result property="Id" column="Customer_Id" />
			<result property="Name" column="CustomerName" />
			<result property="LastLinkMan" column="LinkName"/>
			<result property="LastTelNo" column="mobile_no"/>
			<result property="InsertDateTime" column="balance_date_time"/>
		</resultMap>
		<resultMap id="ExceptionConsumeCustomerMap" class="Order">
			<result property="Id" column="Id"/>
			<result property="CustomerId" column="Customer_Id"/>
			<result property="CustomerName" column="CustomerName"/>
			<result property="SumAmount" column="sumAmount"/>
			<result property="Name" column="name"/>
			<result property="HasPrePaidMoney" column="consumeSumAmountLast"/>
		</resultMap>
	</resultMaps>
	<statements>
    
    <!--客户一览/客户查询(分页)--> 
    <select id="SearchCustomer" parameterClass="map" resultMap="CustomerResultMap.selectResult">
		 Select
		 top (#RowCount#) c.*
		 FROM CUSTOMER As c with(nolock)
		 WHERE c.DELETED = '0'
		 and c.Company_Id=#CompanyId#
		 <isNotNull prepend="And" property="IsNotDisplay">
			c.id>2
		 </isNotNull>
		 <isNotNull prepend="And" property="MemberCardNo">
			 c.Id=(
			 select
			 Customer_Id
			 from Member_Card
			 where Member_Card_No=#MemberCardNo#
			 and branch_shop_Id=#BranchShopId#
			 and Company_Id=#CompanyId#
			 )
		 </isNotNull>
		 and c.id not in(
		  select
		  top (#RowCount#*#PagerCount#) cu.id
		  from customer as cu
		  where cu.Company_id=#CompanyId#
		  and cu.Deleted='0'
		  <isNotNull prepend="And" property="IsNotDisplay">
			cu.id>2
		  </isNotNull>
		  <isNotNull prepend="And" property="MemberCardNo">
			  cu.Id=(
			  select
			  Customer_Id
			  from Member_Card
			  where Member_Card_No=#MemberCardNo#
			  and branch_shop_Id=#BranchShopId#
			  and Company_Id=#CompanyId#
			  )
		  </isNotNull>
		  <dynamic>
			<isNotNull prepend="AND" property="Name">
			  cu.Name like #Name#
			</isNotNull>
			<isNotNull prepend="AND" property="CustomerTypeId">
			  cu.CUSTOMER_TYPE_ID = #CustomerTypeId#
			</isNotNull>
			<isNotNull prepend="AND" property="CustomerLevelId">
			  cu.CUSTOMER_LEVEL_ID = #CustomerLevelId#
			</isNotNull>
			<isNotNull prepend="AND" property="SecondaryTradeId">
			  cu.SECONDARY_TRADE_ID = #SecondaryTradeId#
			</isNotNull>
			<isNotNull prepend="AND" property="LinkMan">
			  cu.Id in(select Customer_Id from Link_Man where NAME like #LinkMan#)
			</isNotNull>
			<isNotNull prepend="AND" property="BeginDate">
			  <![CDATA[cu.INSERT_DATE_TIME >=  #BeginDate#]]>
			</isNotNull>
			<isNotNull prepend="AND" property="EndDate">
			  <![CDATA[cu.INSERT_DATE_TIME < #EndDate#]]>
			</isNotNull>
			<isNotEqual prepend="and"  compareProperty="BranchShopId" compareValue="0">
			  <![CDATA[cu.Branch_shop_id=#BranchShopId#]]>
			</isNotEqual>
			<isNotNull prepend="And" property="PayType">
				cu.pay_Type=#PayType#
			</isNotNull>
		  </dynamic>
		  order by cu.id
        )
		<dynamic>
		<isNotNull prepend="AND" property="Name">
			C.Name like #Name#
		</isNotNull>
		<isNotNull prepend="AND" property="CustomerTypeId">
			C.CUSTOMER_TYPE_ID = #CustomerTypeId#
		</isNotNull>
		<isNotNull prepend="AND" property="CustomerLevelId">
			C.CUSTOMER_LEVEL_ID = #CustomerLevelId#
		</isNotNull>
		<isNotNull prepend="AND" property="SecondaryTradeId">
			C.SECONDARY_TRADE_ID = #SecondaryTradeId#
		</isNotNull>
        <isNotNull prepend="AND" property="LinkMan">
          C.Id in(select Customer_Id from Link_Man where NAME like #LinkMan#)
        </isNotNull>
        <isNotNull prepend="AND" property="BeginDate">
            <![CDATA[C.INSERT_DATE_TIME >=  #BeginDate#]]>
        </isNotNull>
        <isNotNull prepend="AND" property="EndDate">
            <![CDATA[C.INSERT_DATE_TIME < #EndDate#]]>
        </isNotNull>
		<isNotEqual prepend="and"  compareProperty="BranchShopId" compareValue="0">
			<![CDATA[c.Branch_shop_id=#BranchShopId#]]>
		</isNotEqual>
		<isNotNull prepend="And" property="PayType">
			c.pay_Type=#PayType#
		</isNotNull>
       </dynamic>
			order by c.id
		</select>
    <!--统计客户信息记录数-->
    <select id="GetCustomerCount" parameterClass="map" resultClass="long">
      select count(*) from (
      Select DISTINCT  C.*
      FROM CUSTOMER As C with(nolock)
      WHERE C.DELETED = '0' and c.Company_Id=#CompanyId#
      <isNotNull prepend="And" property="IsNotDisplay">
		c.id>2
      </isNotNull>
	  <isNotNull prepend="And" property="MemberCardNo">
		  c.Id=(
		  select
		  Customer_Id
		  from Member_Card
		  where Member_Card_No=#MemberCardNo#
		  and branch_shop_Id=#BranchShopId#
		  and Company_Id=#CompanyId#
		  )
	  </isNotNull>
      <dynamic>
        <isNotNull prepend="AND" property="Name">
          C.Name like #Name#
        </isNotNull>
        <isNotNull prepend="AND" property="CustomerTypeId">
          C.CUSTOMER_TYPE_ID = #CustomerTypeId#
        </isNotNull>
        <isNotNull prepend="AND" property="CustomerLevelId">
          C.CUSTOMER_LEVEL_ID = #CustomerLevelId#
        </isNotNull>
        <isNotNull prepend="AND" property="SecondaryTradeId">
          C.SECONDARY_TRADE_ID = #SecondaryTradeId#
        </isNotNull>
        <isNotNull prepend="AND" property="LinkMan">
         c.Id in( select Customer_Id from Link_Man as l where l.NAME like #LinkMan#)
        </isNotNull>
        <isNotNull prepend="AND" property="BeginDate">
          <![CDATA[ C.INSERT_DATE_TIME >=  #BeginDate#]]>
        </isNotNull>
        <isNotNull prepend="AND" property="EndDate">
          <![CDATA[C.INSERT_DATE_TIME < #EndDate#]]>
        </isNotNull>
        <isNotEqual prepend="and"  compareProperty="BranchShopId" compareValue="0">
          <![CDATA[c.Branch_shop_id=#BranchShopId#]]>
        </isNotEqual>
		<isNotNull prepend="And" property="PayType">
			c.pay_Type=#PayType#
		</isNotNull>
      </dynamic>
      )  a
    </select>
	<select id="SearchCustomerList" parameterClass="map" resultMap ="CustomerResultMap.selectResult">
		Select 
		DISTINCT C.*
		FROM CUSTOMER As C
		<isNotNull property="NeedLinkMan">
			INNER JOIN LINK_MAN AS LM ON LM.CUSTOMER_ID = C.ID
		</isNotNull>
		WHERE C.DELETED = '0'
		<dynamic>
			<isNotNull prepend="AND" property="Name">
				C.Name like #Name#
			</isNotNull>
			<isNotNull prepend="AND" property="LinkMan">
				LM.NAME = #LinkMan#
			</isNotNull>
		</dynamic>
	</select>
	<delete id="DeleteLinkMan" parameterClass="long">
		DELETE FROM LINK_MAN WHERE CUSTOMER_ID = #Id#
	</delete>    
    <!--查询未确认的客户(分页)-->
    <select id="SelectAllNotValidate" resultMap="CustomerResultMap.selectResult" parameterClass="map">
      SELECT 
	  top(#RowCount#) *
      FROM CUSTOMER as c
      Where c.DELETED = '0'
	  <dynamic>
		  <isNotNull prepend="And" property="CustomerName">
			  c.Name like #CustomerName#
		  </isNotNull>
	  </dynamic>
		And c.Company_Id=#CompanyId#
		And c.Branch_shop_Id=#BranchShopId#
		And c.Id>2
		And c.Id not in(
		SELECT top(#RowCount#*#PageCount#) cu.id
		FROM CUSTOMER as cu
		Where cu.DELETED = '0'
		<dynamic>
			<isNotNull prepend="And" property="CustomerName">
				cu.Name like #CustomerName#
			</isNotNull>
		</dynamic>
      And cu.Company_Id=#CompanyId#
      And cu.Branch_shop_Id=#BranchShopId#
      And cu.Id>2
      order by cu.id
      )
      ORDER BY ID
    </select>
    <select id="SelectAllNotValidateRowCount" resultClass="long"  parameterClass="map">
		SELECT count(*)
		FROM CUSTOMER as c
		Where c.DELETED = '0'
		<dynamic>
			<isNotNull prepend="And" property="CustomerName">
				c.Name like #CustomerName#
			</isNotNull>
		</dynamic>
      And c.Company_Id=#CompanyId#
      And c.Branch_shop_Id=#BranchShopId#
      And c.Id>2
    </select>  
	<update id="UpdateValidateStatus" parameterClass="map">
		UPDATE CUSTOMER
		SET
		VALIDATE_STATUS = #ValidateStatus#
		WHERE ID = #Id#
	</update>
	<!--功能: 无消费客户查询 
		作者: 张晓林
		日期: 2010年1月25日16:29:32
		-->
	<select id="SelectWithoutConsumeCustomer" parameterClass="map" resultMap="SelectWithoutConsumeCustomer">
		if exists(select * from sysobjects where name='##tem')
		begin
		drop table ##tem
		end
		select * into ##tem from(
		<![CDATA[
				select
				c.Id Customer_Id,c.Name CustomerName,lm.Name LinkName,
				lm.mobile_no,z.balance_date_time
				from Customer c
				Inner join link_man lm on lm.Customer_Id=c.Id
				Inner join(
				select
				distinct
				customer_Id,max(balance_Date_Time) balance_Date_Time
				from orders a
				where balance_date_time>#EndTime#
				and status=#Status#
				group by customer_Id
				)z on z.Customer_Id=c.Id
				where c.deleted='0' and c.company_Id=#CompanyId#
				]]>
				<dynamic>
					<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
						c.branch_shop_id=#BranchShopId#
					</isNotEqual>
					<isNotNull  prepend="and" property="CustomerLevel">
						c.customer_Level_Id=#CustomerLevel#
					</isNotNull>
					<isNotNull prepend="and" property="CustomerType" >
						c.customer_Type_Id=#CustomerType#
					</isNotNull>
					<isNotNull prepend="and" property="MemberCardLevel">
						c.Id in(select customer_Id from member_card where member_card_level_Id=#MemberCardLevel#)
					</isNotNull>
				</dynamic>
				union all(
					<![CDATA[
					select
					c.Id Customer_Id,c.Name CustomerName,lm.Name LinkName,
					lm.mobile_no,z.balance_date_time
					from Customer c
					Inner join link_man lm on lm.Customer_Id=c.Id
					Inner join(
					select
					distinct
					customer_Id,max(balance_Date_Time) balance_Date_Time
					from orders a
					where balance_date_time<#BeginTime#
					and status=#Status#
					group by customer_Id
					)z on z.Customer_Id=c.Id
					where c.deleted='0' and c.company_Id=#CompanyId#
					]]>
					<dynamic>
						<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
							c.branch_shop_id=#BranchShopId#
						</isNotEqual>
						<isNotNull  prepend="and" property="CustomerLevel">
							c.customer_Level_Id=#CustomerLevel#
						</isNotNull>
						<isNotNull prepend="and" property="CustomerType" >
							c.customer_Type_Id=#CustomerType#
						</isNotNull>
						<isNotNull prepend="and" property="MemberCardLevel">
							c.Id in(select customer_Id from member_card where member_card_level_Id=#MemberCardLevel#)
						</isNotNull>
					</dynamic>
					and c.Id not in(
					select
					c.Id
					from Customer c
					Inner join link_man lm on lm.Customer_Id=c.Id
					Inner join(
					select
					distinct
					customer_Id,max(balance_Date_Time) balance_Date_Time
					from orders a
					where balance_date_time>#EndTime#
					and status=#Status#
					group by customer_Id
					)z on z.Customer_Id=c.Id
					where c.deleted='0' and c.company_Id=#CompanyId#		
					<dynamic>
						<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
							c.branch_shop_id=#BranchShopId#
						</isNotEqual>
						<isNotNull  prepend="and" property="CustomerLevel">
							c.customer_Level_Id=#CustomerLevel#
						</isNotNull>
						<isNotNull prepend="and" property="CustomerType" >
							c.customer_Type_Id=#CustomerType#
						</isNotNull>
						<isNotNull prepend="and" property="MemberCardLevel">
							c.Id in(select customer_Id from member_card where member_card_level_Id=#MemberCardLevel#)
						</isNotNull>
					</dynamic>
		)
		)
		)z

		select
		top(#PageCount#) *
		from ##tem
		where Customer_Id not in(
		select top(#PageCount#*#CurrentPageIndex#) Customer_Id from ##tem
		order by balance_date_time desc
		)
		order by balance_date_time desc
		drop table ##tem
	</select>
	<select id="GetWithoutConsumeCustomerRowCount" parameterClass="map" resultClass="long">
		if exists(select * from sysobjects where name='##tem')
		begin
		drop table ##tem
		end
		select * into ##tem from(
		<![CDATA[
				select
				c.Id Customer_Id,c.Name CustomerName,lm.Name LinkName,
				lm.mobile_no,z.balance_date_time
				from Customer c
				Inner join link_man lm on lm.Customer_Id=c.Id
				Inner join(
				select
				distinct
				customer_Id,max(balance_Date_Time) balance_Date_Time
				from orders a
				where balance_date_time>#EndTime#
				and status=#Status#
				group by customer_Id
				)z on z.Customer_Id=c.Id
				where c.deleted='0' and c.company_Id=#CompanyId#
				]]>
				<dynamic>
					<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
						c.branch_shop_id=#BranchShopId#
					</isNotEqual>
					<isNotNull  prepend="and" property="CustomerLevel">
						c.customer_Level_Id=#CustomerLevel#
					</isNotNull>
					<isNotNull prepend="and" property="CustomerType" >
						c.customer_Type_Id=#CustomerType#
					</isNotNull>
					<isNotNull prepend="and" property="MemberCardLevel">
						c.Id in(select customer_Id from member_card where member_card_level_Id=#MemberCardLevel#)
					</isNotNull>
				</dynamic>
		union all(
		<![CDATA[
				select
				c.Id Customer_Id,c.Name CustomerName,lm.Name LinkName,
				lm.mobile_no,z.balance_date_time
				from Customer c
				Inner join link_man lm on lm.Customer_Id=c.Id
				Inner join(
				select
				distinct
				customer_Id,max(balance_Date_Time) balance_Date_Time
				from orders a
				where balance_date_time<#BeginTime#
				and status=#Status#
				group by customer_Id
				)z on z.Customer_Id=c.Id
				where c.deleted='0' and c.company_Id=#CompanyId#
				]]>
				<dynamic>
					<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
						c.branch_shop_id=#BranchShopId#
					</isNotEqual>
					<isNotNull  prepend="and" property="CustomerLevel">
						c.customer_Level_Id=#CustomerLevel#
					</isNotNull>
					<isNotNull prepend="and" property="CustomerType" >
						c.customer_Type_Id=#CustomerType#
					</isNotNull>
					<isNotNull prepend="and" property="MemberCardLevel">
						c.Id in(select customer_Id from member_card where member_card_level_Id=#MemberCardLevel#)
					</isNotNull>
				</dynamic>
				and c.Id not in(
				select
				c.Id
				from Customer c
				Inner join link_man lm on lm.Customer_Id=c.Id
				Inner join(
				select
				distinct
				customer_Id,max(balance_Date_Time) balance_Date_Time
				from orders a
				where balance_date_time>#EndTime#
				and status=#Status#
				group by customer_Id
				)z on z.Customer_Id=c.Id
				where c.deleted='0' and c.company_Id=#CompanyId#
				<dynamic>
					<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
						c.branch_shop_id=#BranchShopId#
					</isNotEqual>
					<isNotNull  prepend="and" property="CustomerLevel">
						c.customer_Level_Id=#CustomerLevel#
					</isNotNull>
					<isNotNull prepend="and" property="CustomerType" >
						c.customer_Type_Id=#CustomerType#
					</isNotNull>
					<isNotNull prepend="and" property="MemberCardLevel">
						c.Id in(select customer_Id from member_card where member_card_level_Id=#MemberCardLevel#)
					</isNotNull>
				</dynamic>
				)
			)
		)z
		select
		count(*)
		from ##tem
		drop table ##tem
	</select>
	<select id="GetWithoutConsumeCustomerRowPrint" parameterClass="map" resultMap="SelectWithoutConsumeCustomer">
			if exists(select * from sysobjects where name='##tem')
			begin
			drop table ##tem
			end
			select * into ##tem from(
				<![CDATA[
				select
				c.Id Customer_Id,c.Name CustomerName,lm.Name LinkName,
				lm.mobile_no,z.balance_date_time
				from Customer c
				Inner join link_man lm on lm.Customer_Id=c.Id
				Inner join(
				select
				distinct
				customer_Id,max(balance_Date_Time) balance_Date_Time
				from orders a
				where balance_date_time>#EndTime#
				and status=#Status#
				group by customer_Id
				)z on z.Customer_Id=c.Id
				where c.deleted='0' and c.company_Id=#CompanyId#
				]]>
				<dynamic>
					<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
						c.branch_shop_id=#BranchShopId#
					</isNotEqual>
					<isNotNull  prepend="and" property="CustomerLevel">
						c.customer_Level_Id=#CustomerLevel#
					</isNotNull>
					<isNotNull prepend="and" property="CustomerType" >
						c.customer_Type_Id=#CustomerType#
					</isNotNull>
					<isNotNull prepend="and" property="MemberCardLevel">
						c.Id in(select customer_Id from member_card where member_card_level_Id=#MemberCardLevel#)
					</isNotNull>
				</dynamic>
				union all(
				<![CDATA[
					select
					c.Id Customer_Id,c.Name CustomerName,lm.Name LinkName,
					lm.mobile_no,z.balance_date_time
					from Customer c
					Inner join link_man lm on lm.Customer_Id=c.Id
					Inner join(
					select
					distinct
					customer_Id,max(balance_Date_Time) balance_Date_Time
					from orders a
					where balance_date_time<#BeginTime#
					and status=#Status#
					group by customer_Id
					)z on z.Customer_Id=c.Id
					where c.deleted='0' and c.company_Id=#CompanyId#
					]]>
				<dynamic>
					<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
						c.branch_shop_id=#BranchShopId#
					</isNotEqual>
					<isNotNull  prepend="and" property="CustomerLevel">
						c.customer_Level_Id=#CustomerLevel#
					</isNotNull>
					<isNotNull prepend="and" property="CustomerType" >
						c.customer_Type_Id=#CustomerType#
					</isNotNull>
					<isNotNull prepend="and" property="MemberCardLevel">
						c.Id in(select customer_Id from member_card where member_card_level_Id=#MemberCardLevel#)
					</isNotNull>
				</dynamic>
				and c.Id not in(
				select
				c.Id
				from Customer c
				Inner join link_man lm on lm.Customer_Id=c.Id
				Inner join(
				select
				distinct
				customer_Id,max(balance_Date_Time) balance_Date_Time
				from orders a
				where balance_date_time>#EndTime#
				and status=#Status#
				group by customer_Id
				)z on z.Customer_Id=c.Id
				where c.deleted='0' and c.company_Id=#CompanyId#
				<dynamic>
					<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
						c.branch_shop_id=#BranchShopId#
					</isNotEqual>
					<isNotNull  prepend="and" property="CustomerLevel">
						c.customer_Level_Id=#CustomerLevel#
					</isNotNull>
					<isNotNull prepend="and" property="CustomerType" >
						c.customer_Type_Id=#CustomerType#
					</isNotNull>
					<isNotNull prepend="and" property="MemberCardLevel">
						c.Id in(select customer_Id from member_card where member_card_level_Id=#MemberCardLevel#)
					</isNotNull>
				</dynamic>
				)
			)
		)z
		select
		*
		from ##tem
		order by balance_date_time desc
		drop table ##tem
	</select>
	<update id="UpdateCustomerLinkManInfo" parameterClass="Customer">
		<![CDATA[
		Update Customer set LAST_LINK_MAN=#LastLinkMan#,LAST_TEL_NO=#LastTelNo#,
		LINK_MAN_COUNT=isnull(LINK_MAN_COUNT,0)+#LinkManCount# 
		where deleted='0' and company_id=#Company_Id# id=#Id#
		]]>
		<dynamic>
			<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
				<![CDATA[
				Branch_Shop_Id=#BranchShopId#
				]]>
			</isNotEqual>
		</dynamic>
	</update>
	<!--查询客户消费历史(分页)-->
	<select id="SelectoOrderByCustomerId" parameterClass="map" resultMap="OrderResultMap.selectResult">
		SELECT
		top(#RowCount#) *
		FROM ORDERS as o
		Where o.DELETED = '0'
		AND o.CUSTOMER_ID = #CustomerId#
		And o.Company_Id=#CompanyId#
		And o.Branch_Shop_Id=#BranchShopId#
		And o.Id not in
		(
		select top(#RowCount#*#PageCount#) a.Id from Orders as a
		Where a.DELETED = '0'
		AND a.CUSTOMER_ID = #CustomerId#
		And a.Company_Id=#CompanyId#
		And a.Branch_Shop_Id=#BranchShopId#
		ORDER BY a.NO
		)
		ORDER BY NO
	</select>
	<select id="SelectoOrderRowCountByCustomerId" parameterClass="map" resultClass="long">
		SELECT
		count(*)
		FROM ORDERS as o
		Where o.DELETED = '0'
		AND o.CUSTOMER_ID = #CustomerId#
		And o.Company_Id=#CompanyId#
		And o.Branch_Shop_Id=#BranchShopId#
	</select>
    <!--根据客户名称获取客户Id-->
    <select id="GetCustomerIdByCustomerName" parameterClass="Customer" resultMap="CustomerResultMap.selectResult">
      Select * from Customer
      where Name=#Name#
      And Deleted='0'
      And Company_Id=#CompanyId#
      And Branch_Shop_Id=#BranchShopId#
    </select>
    <select id="GetCustomerPayTypeByCustomerId" resultClass="long">
      select pay_type
      from customer
      where deleted='0'
      and branch_shop_Id=#BranchShopId#
      and company_Id=#CompanyId#
      and Id=#Id#
    </select>
	<update id="SavePreDeposit">
		update customer set amount=amount+#Amount# where Id=#Id#
	</update>
	<update id="DiffPreDeposits">
		update customer set amount=amount-#Amount# where Id=#Id#
	</update>

	<select id="GetCustomer" parameterClass="map" resultMap="CustomerResultMap.selectResult">
		SELECT * FROM CUSTOMER a inner join
		MEMBER_CARD b on b.customer_id=a.id
		WHERE a.Deleted='0'
		And a.Company_Id=#companyId#
		And a.Branch_Shop_Id=#branchShopId#
		<dynamic>
			<isNotEmpty prepend="and" property="memberCardNo">
				b.MEMBER_CARD_NO=#memberCardNo#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="customerName">
				a.NAME=#customerName#
			</isNotEmpty>
		</dynamic>
	</select>
	<!--功能:波动客户消费查询
		作者:
		日期：
	-->
	<select id="ExceptionConsumeCustomer" parameterClass="Order" resultMap="ExceptionConsumeCustomerMap">
		if exists(select * from sysobjects where name='##tem')
		begin
		drop table ##tem
		end
		select identity(bigint,1,1) as Id,* into ##tem from(
			select z1.*,isNull(z2.consumeSumAmountLast,z1.SumAmount) consumeSumAmountLast from(
				select * from(
				select
				a.customer_Name customername,sum(isNull(a.sum_amount,0))sumAmount,
				a.Name,a.Customer_Id
				from orders a
				where a.deleted='0' and a.Company_Id=#CompanyId# and branch_shop_Id=#BranchShopId# and a.status=#Status#
				<dynamic>
					<isNotNull prepend="And" property="BalanceDateTimeString">
						<![CDATA[a.balance_date_time>=#BalanceDateTimeString#]]>
					</isNotNull>
					<isNotNull prepend="And" property="InsertDateTimeString">
						<![CDATA[a.balance_date_time<=#InsertDateTimeString#]]>
					</isNotNull>
				</dynamic>
				group by a.customer_Name,a.Name,a.Customer_Id
				)aa where 1=1
				<dynamic>
					<isNotNull prepend="  " property="No">
						<isGreaterEqual prepend="and" compareProperty="SumAmount" compareValue="0">
							<![CDATA[aa.sumamount $No$ #SumAmount#]]>
						</isGreaterEqual>
					</isNotNull>
				</dynamic>
			)z1
			left join(
				select customer_Id, Sum(isNull(consumeSumAmountLast,0)) consumeSumAmountLast from(
					select * from(
					select
					sum(isNull(a.sum_amount,0))consumeSumAmountLast,a.Customer_Id
					from orders a
					where a.deleted='0' and a.Company_Id=#CompanyId# and branch_shop_Id=#BranchShopId# and a.status=#Status#
					<dynamic>
						<isNotNull prepend="And" property="NewOrderName">
							<![CDATA[a.balance_date_time>=#NewOrderName#]]>
						</isNotNull>
						<isNotNull prepend="And" property="CashName">
							<![CDATA[a.balance_date_time<=#CashName#]]>
						</isNotNull>
					</dynamic>
					group by a.Customer_Id
					)aa where 1=1
					<dynamic>
						<isNotNull prepend="  " property="No">
							<isGreaterEqual prepend="and" compareProperty="SumAmount" compareValue="0">
								<![CDATA[aa.consumeSumAmountLast $No$ #SumAmount#]]>
							</isGreaterEqual>
						</isNotNull>
					</dynamic>
				)z3
				group by customer_Id
			)z2 on z2.Customer_Id=z1.Customer_Id
		)z

		select top(#Status1#) * from ##tem
		where id not in(
		select top(#Status1#*#CurrentPageIndex#) Id from ##tem
		)
		drop table ##tem
	</select>
	<select id="GetExceptionConsumeCustomerRowCount" parameterClass="Order" resultClass="long">
		select count(*) from(
		select z1.*,isNull(z2.consumeSumAmountLast,z1.SumAmount) consumeSumAmountLast from(
		select * from(
		select
		a.customer_Name customername,sum(isNull(a.sum_amount,0))sumAmount,
		a.Name,a.Customer_Id
		from orders a
		where a.deleted='0' and a.Company_Id=#CompanyId# and branch_shop_Id=#BranchShopId# and a.status=#Status#
		<dynamic>
			<isNotNull prepend="And" property="BalanceDateTimeString">
				<![CDATA[a.balance_date_time>=#BalanceDateTimeString#]]>
			</isNotNull>
			<isNotNull prepend="And" property="InsertDateTimeString">
				<![CDATA[a.balance_date_time<=#InsertDateTimeString#]]>
			</isNotNull>
		</dynamic>
		group by a.customer_Name,a.Name,a.Customer_Id
		)aa where 1=1
		<dynamic>
			<isNotNull prepend="  " property="No">
				<isGreaterEqual prepend="and" compareProperty="SumAmount" compareValue="0">
					<![CDATA[aa.sumamount $No$ #SumAmount#]]>
				</isGreaterEqual>
			</isNotNull>
		</dynamic>
		)z1
		left join(
		select customer_Id, Sum(isNull(consumeSumAmountLast,0)) consumeSumAmountLast from(
		select * from(
		select
		sum(isNull(a.sum_amount,0))consumeSumAmountLast,a.Customer_Id
		from orders a
		where a.deleted='0' and a.Company_Id=#CompanyId# and branch_shop_Id=#BranchShopId# and a.status=#Status#
		<dynamic>
			<isNotNull prepend="And" property="NewOrderName">
				<![CDATA[a.balance_date_time>=#NewOrderName#]]>
			</isNotNull>
			<isNotNull prepend="And" property="CashName">
				<![CDATA[a.balance_date_time<=#CashName#]]>
			</isNotNull>
		</dynamic>
		group by a.Customer_Id
		)aa where 1=1
		<dynamic>
			<isNotNull prepend="  " property="No">
				<isGreaterEqual prepend="and" compareProperty="SumAmount" compareValue="0">
					<![CDATA[aa.consumeSumAmountLast $No$ #SumAmount#]]>
				</isGreaterEqual>
			</isNotNull>
		</dynamic>
		)z3
		group by customer_Id
		)z2 on z2.Customer_Id=z1.Customer_Id
		)zz
	</select>
	<select id="GetExceptionConsumeCustomerPrint" parameterClass="Order" resultMap="ExceptionConsumeCustomerMap">
		if exists(select * from sysobjects where name='##tem')
		begin
		drop table ##tem
		end
		select identity(bigint,1,1) as Id,* into ##tem from(
		select z1.*,isNull(z2.consumeSumAmountLast,z1.SumAmount) consumeSumAmountLast from(
		select * from(
		select
		a.customer_Name customername,sum(isNull(a.sum_amount,0))sumAmount,
		a.Name,a.Customer_Id
		from orders a
		where a.deleted='0' and a.Company_Id=#CompanyId# and branch_shop_Id=#BranchShopId# and a.status=#Status#
		<dynamic>
			<isNotNull prepend="And" property="BalanceDateTimeString">
				<![CDATA[a.balance_date_time>=#BalanceDateTimeString#]]>
			</isNotNull>
			<isNotNull prepend="And" property="InsertDateTimeString">
				<![CDATA[a.balance_date_time<=#InsertDateTimeString#]]>
			</isNotNull>
		</dynamic>
		group by a.customer_Name,a.Name,a.Customer_Id
		)aa where 1=1
		<dynamic>
			<isNotNull prepend="  " property="No">
				<isGreaterEqual prepend="and" compareProperty="SumAmount" compareValue="0">
					<![CDATA[aa.sumamount $No$ #SumAmount#]]>
				</isGreaterEqual>
			</isNotNull>
		</dynamic>
		)z1
		left join(
		select customer_Id, Sum(isNull(consumeSumAmountLast,0)) consumeSumAmountLast from(
		select * from(
		select
		sum(isNull(a.sum_amount,0))consumeSumAmountLast,a.Customer_Id
		from orders a
		where a.deleted='0' and a.Company_Id=#CompanyId# and branch_shop_Id=#BranchShopId# and a.status=#Status#
		<dynamic>
			<isNotNull prepend="And" property="NewOrderName">
				<![CDATA[a.balance_date_time>=#NewOrderName#]]>
			</isNotNull>
			<isNotNull prepend="And" property="CashName">
				<![CDATA[a.balance_date_time<=#CashName#]]>
			</isNotNull>
		</dynamic>
		group by a.Customer_Id
		)aa where 1=1
		<dynamic>
			<isNotNull prepend="  " property="No">
				<isGreaterEqual prepend="and" compareProperty="SumAmount" compareValue="0">
					<![CDATA[aa.consumeSumAmountLast $No$ #SumAmount#]]>
				</isGreaterEqual>
			</isNotNull>
		</dynamic>
		)z3
		group by customer_Id
		)z2 on z2.Customer_Id=z1.Customer_Id
		)z4

		select * from ##tem
		drop table ##tem
	</select>
</statements>
</sqlMap>
<?xml version="1.0" encoding="utf-8"?>
<sqlMap namespace="Order" xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:noNamespaceSchemaLocation="SqlMap.xsd">
	<!--<alias>
		<typeAlias alias="Order" type="Workflow.Da.Domain.Order, Workflow.Support" />
	</alias>-->	
	<resultMaps>
		<resultMap id="selectResult1" class="Order">
			<result property="Id" column="ordersid" dbType="bigint"/>
			<result property="No" column="No" dbType="varchar"/>
			<result property="Memo" column="Memo" dbType="nvarchar"/>
			<result property="InsertDateTime" column="Insert_Date_Time" dbType="datetime"/>
			<result property="BalanceDateTime" column="BALANCE_DATE_TIME" dbType="datetime"/>
			<result property="Name" column="CustomerName" dbType="nvarchar"/>
			<!--<result property="EmployeeId" column="employee_id" dbType="bigint"/>-->
			<result property="NewOrderName" column="NewOrderName" dbType="nvarchar"/>
			<result property="CashName" column="CashName" dbType="nvarchar"/>
			<result property="Sumamount" column="SUM_AMOUNT" dbType="decimal"/>
		</resultMap>
		<resultMap id="SelectDailyOrderResult" class="Order">
			<result property="Id" column="ID" />
			<result property="No" column="NO" />
			<result property="CustomerName" column="CUSTOMERNAME"/>
			<result property="CustomerTypeName" column="CUSTOMERTYPENAME"/>
			<result property="InsertDateTime" column="INSERT_DATE_TIME"/>
			<result property="DeliveryType" column="DELIVERY_TYPE"/>
			<result property="DeliveryDateTime" column="DELIVERY_DATE_TIME"/>
			<result property="UserName" column="USERSNAME"/>
			<result property="Status" column="STATUS"/>
			<result property="Memo" column="MEMO"/>
		</resultMap>
		<resultMap id="SelectOrderInfoByOrderIdResult" class="Order">
			<result property="Id" column="ID" />
			<result property="No" column="NO" />
			<result property="CustomerId" column="CUSTOMER_ID"/>
			<result property="TradeId" column="TRADE_ID"/>
			<result property="CustomerName" column="CUSTOMERNAME"/>
			<result property="CustomerType" column="CUSTOMER_TYPE"/>
			<result property="CustomerTypeName" column="CUSTOMERTYPENAME"/>
			<result property="LinkManName" column="LinkManName"/>
			<result property="LastTelNo" column="LastTelNo"/>
			<result property="DeliveryType" column="DELIVERY_TYPE"/>
			<result property="DeliveryDateTime" column="DELIVERY_DATE_TIME"/>
			<result property="Memo" column="MEMO"/>
			<result property="ProjectName" column="PROJECT_NAME" dbType="nvarchar"/>
			<result property="ProjectName" column="PROJECT_NAME" dbType="nvarchar"/>
			<result property="PayType" column="PAY_TYPE" dbType="int"/>
			<result property="MemberCardId" column="MEMBER_CARD_ID" dbType="bigint"/>
			<result property="MemberCardNo" column="MemberCardNo" dbType="varchar"/>
			<result property="PrepareMoney" column="PREPARE_MONEY" dbType="char"/>
			<result property="PrepareMoneyAmount" column="PREPARE_MONEY_AMOUNT" dbType="decimal"/>
			<result property="NeedTicket" column="NEED_TICKET" dbType="char"/>
			<result property="SumAmount" column="SUM_AMOUNT" dbType="decimal"/>
			<result property="Status" column="STATUS"/>
			<result property="InsertDateTime" column="INSERT_DATE_TIME" dbType="datetime"/>
			<result property="NewOrderUserId" column="NEW_ORDER_USER_ID"/>
			<result property="CashUserId" column="CASH_USER_ID"/>
			<result property="PaidTicket" column="Paid_Ticket"/>
			<result property="RealPaidAmount" column="Real_Paid_Amount"/>
			<result property="NotPayTicketAmount" column="Not_Pay_Ticket_Amount"/>
      <result property="PaidTicketAmount" column="Paid_Ticket_Amount"/>
		</resultMap>
		<!--前台交班需要的工单信息SelectStageHandOverOrderResult-->
		<!-- 工单状态  	 工单号  	 开单时间  	 取送方式  	 送货时间  	 备注-->
		<resultMap id="SelectStageHandOverOrderResult" class="Order">
			<result property="Id" column="ID" />
			<result property="No" column="NO" />
			<result property="InsertDateTime" column="INSERT_DATE_TIME" dbType="datetime"/>
			<result property="DeliveryType" column="DELIVERY_TYPE"/>
			<result property="InsertDateTimeString" column="DELIVERY_DATE_TIME"/>
			<result property="Memo" column="MEMO"/>
		</resultMap>
		<!--前台交班需要的工单信息SelectFrontHandOverOrderResult-->
		<!-- 工单状态  	 工单号  	 开单时间  	 取送方式  	 送货时间  	 备注-->
		<resultMap id="SelectFrontHandOverOrderResult" class="Order">
			<result property="Id" column="ID" />
			<result property="No" column="NO" />
			<result property="Status" column="STATUS"/>
			<result property="InsertDateTime" column="INSERT_DATE_TIME" dbType="datetime"/>
			<result property="DeliveryType" column="DELIVERY_TYPE"/>
			<result property="DeliveryDateTime" column="DELIVERY_DATE_TIME"/>
			<result property="Memo" column="MEMO"/>
      <result property="CustomerName" column="CustomerName"/>
		</resultMap>
		<!--前台交班需要的工单信息:工单号		金额-->
		<resultMap id="SelectCashHandOverOrderResult" class="Order">
			<result property="Id" column="ID" />
			<result property="No" column="NO" />
			<result property="InsertDateTime" column="INSERT_DATE_TIME" dbType="datetime"/>
			<result property="PrepareMoneyAmount" column="PREPARE_MONEY_AMOUNT" dbType="decimal"/>
			<result property="Memo" column="MEMO"/>
		</resultMap>
		<resultMap id="selectUnCloseOrder" class="Order">
			<result property="Id" column="ID" dbType="bigint"/>
			<result property="CustomerId" column="CUSTOMER_ID" dbType="bigint"/>
			<result property="MemberCardId" column="MEMBER_CARD_ID" dbType="bigint"/>
			<result property="No" column="NO" dbType="varchar"/>
			<result property="CustomerType" column="CUSTOMER_TYPE" dbType="int"/>
			<result property="CustomerName" column="CUSTOMER_NAME" dbType="nvarchar"/>
			<result property="Name" column="NAME" dbType="nvarchar"/>
			<result property="ProjectName" column="PROJECT_NAME" dbType="nvarchar"/>
			<result property="PayType" column="PAY_TYPE" dbType="int"/>
			<result property="PrepareMoney" column="PREPARE_MONEY" dbType="char"/>
			<result property="PrepareMoneyAmount" column="PREPARE_MONEY_AMOUNT" dbType="decimal"/>
			<result property="NeedTicket" column="NEED_TICKET" dbType="char"/>
			<result property="DeliveryType" column="DELIVERY_TYPE" dbType="int"/>
			<result property="DeliveryDateTime" column="DELIVERY_DATE_TIME" dbType="datetime"/>
			<result property="SumAmount" column="SUM_AMOUNT" dbType="decimal"/>
			<result property="Memo" column="MEMO" dbType="nvarchar"/>
			<result property="Status" column="STATUS" dbType="int"/>
			<result property="BalanceDateTime" column="BALANCE_DATE_TIME" dbType="datetime"/>
			<result property="Deleted" column="DELETED" dbType="char"/>
			<result property="InsertDateTime" column="INSERT_DATE_TIME" dbType="datetime"/>
			<result property="InsertUser" column="INSERT_USER" dbType="bigint"/>
			<result property="UpdateDateTime" column="UPDATE_DATE_TIME" dbType="datetime"/>
			<result property="UpdateUser" column="UPDATE_USER" dbType="bigint"/>
			<result property="Version" column="VERSION" dbType="int"/>
			<result property="CompanyId" column="COMPANY_ID" dbType="bigint"/>
			<result property="BranchShopId" column="BRANCH_SHOP_ID" dbType="bigint"/>
			<result property="NewOrderUser" column="NEW_ORDER_USER_ID" select="UserBase.SelectByPk" nullValue="0" lazyLoad="true"/>
			<result property="CashUser" column="CASH_USER_ID" select="UserBase.SelectByPk" nullValue="0" lazyLoad="true"/>
			<result property="OrderItemList" column="ID" select="OrderBase.SelectOrderItem" nullValue="0" lazyLoad="true"/>
			<result property="UserName" column="EmployeeName" dbType="nvarchar"/>
			<result property="LastTelNo" column="Last_Tel_No" dbType="nvarchar"/>
		</resultMap>
		<resultMap id="selectArrearageResult" class="Order">
			<result property="Id" column="ID" dbType="bigint"/>
			<result property="No" column="NO" dbType="varchar"/>
			<result property="SumAmount" column="SUM_AMOUNT" dbType="decimal"/>
			<result property="PaidAmount" column="PAID_AMOUNT" dbType="decimal"/>
			<result property="BalanceDateTime" column="BALANCE_DATE_TIME" dbType="datetime"/>
			<result property="InsertDateTime" column="INSERT_DATE_TIME" dbType="datetime"/>
			<result property="Zero" column="ZERO"/>
			<result property="Concession" column="CONCESSION" />
			<result property="RenderUp" column="CONCESSION1" />
		</resultMap>
		<resultMap id="AnalyzeDebtTime" class="Order">
			<result property="Id" column="ID" dbType="bigint"/>
			<result property="CustomerName" column="CUSTOMERNAME"/>
			<result property="SumAmount" column="SUMAMOUNT"/>
			<result property="Days" column="DAYS"/>
		</resultMap>
		<resultMap id="SelectCustomerConsume" class="Order">
			<result property="CustomerId" column="Customer_Id"/>
			<result property="CustomerName" column="CustomerName"/>
			<result property="OrderCount" column="orderCount"/>
			<result property="PaperCount" column="papercount"/>
			<result property="SumAmount" column="sumAmount"/>
			<result property="Memo" column="MEMO" />
		</resultMap>
		<!--取得欠款笔数/欠款金额(收银交班)-->
		<resultMap id="SelectDebtAmountResult" class="CashHandOver">
			<result property="DebtCount" column="DEBT_COUNT" dbType="int"/>
			<result property="DebtAmountSum" column="DEBT_AMOUNT_SUM" dbType="decimal"/>
		</resultMap>
		<!--取得记帐笔数/记帐金额(收银交班)-->
		<resultMap id="SelectKeepBusinessRecordAmountResult" class="CashHandOver">
			<result property="KeepBusinessRecordCount" column="KEEP_BUSINESS_RECORD_COUNT" dbType="int"/>
			<result property="KeepBusinessRecordAmountSum" column="KEEP_BUSINESS_RECORD_AMOUNT_SUM" dbType="decimal"/>
		</resultMap>
		<!--取得发票笔数/发票金额(收银交班)-->
		<resultMap id="SelectTicketAmountResult" class="CashHandOver">
		<result property="TicketCount" column="TicketCount"/>
			<result property="TicketAmountSum" column="TICKET_AMOUNT_SUM" dbType="decimal"/>
		</resultMap>
		<resultMap id="SelectBranchShopTurnover" class="Order">
			<result property="Id" column="branchShopId"/>
			<result property="CustomerName" column="branchshopName"/>
			<result property="OrderCount" column="orderCount"/>
			<result property="PaidAmount" column="PaidAmount"/>
			<result property="SumAmount" column="sumAmount"/>
			<result property="PrepareMoneyAmount" column="arrearage"/>
			<result property="Memo" column="MEMO" />
		</resultMap>
		<resultMap id="SelectCustomerArrearage" class="Order">
	    <result property="CustomerId" column="Customer_ID" dbType="bigint"/>
		<result property="CustomerName" column="Customer_Name" dbType="nvarchar"/>
		<result property="SumAmount" column="OweMomeyTotal" dbType="decimal"/>
		<result property="Memo" column="Memo" dbType="nvarchar"/>
		</resultMap>
		<resultMap id="SelectCustomerPrepay" class="Order">
			<result property="CustomerId" column="Customer_ID"/>
			<result property="CustomerName" column="CustomerName"/>
			<result property="PrepareMoneyAmount" column="PrepareMoneyAmount"/>
			<result property="BalanceDateTime" column="GatheringDateTime"/>
			<result property="Memo" column="MEMO" />
		</resultMap>
		<resultMap id="SelectCustomerHistory" class="Order">
			<result property="CustomerId" column="Customer_ID"/>
			<result property="MemberCardId" column="Member_Card_Id"/>
			<result property="CustomerName" column="CustomerName"/>
			<result property="OrderCount" column="orderCount"/>
			<result property="RealPaidAmount" column="arrearage"/>
			<result property="PaidAmount" column="averageAmount"/>
			<result property="SumAmount" column="sumAmount"/>
			<result property="Address" column="address"/>
			<result property="LastTelNo" column="Last_Tel_No"/>
			<result property="LinkManName" column="Last_Link_Man"/>
			<result property="MemberCardNo" column="Member_Card_No"/>
			<result property="Memo" column="MEMO" />
		</resultMap>
		<resultMap id="SelectCustomerOrdersHistory" class="Order">
			<result property="Id" column="ID"/>
			<result property="No" column="NO"/>
			<result property="BalanceDateTime" column="BALANCE_DATE_TIME" dbType="datetime"/>
			<result property="SumAmount" column="Sum_Amount"/>
			<result property="RealPaidAmount" column="arrearage"/>
			<result property="PaidAmount" column="Paid_Amount"/>
			<result property="Zero" column="zero"/>
			<result property="Concession" column="Concession"/>
		</resultMap>
		<resultMap id="ExceptionPriceOrdersCount" class="Order">
			<result property="Id" column="ID"/>
			<result property="No" column="NO"/>
			<result property="CustomerName" column="Customer_Name"/>
			<result property="SumAmount" column="Sum_Amount"/>
			<result property="RealPaidAmount" column="Real_Paid_Amount"/>
			<result property="PaidAmount" column="Paid_Amount"/>
			<result property="Name" column="Name"/>
			<result property="UpdateDateTime" column="Update_Date_Time"/>
			<result property="Memo" column="Memo"/>
			<result property="Zero" column="Zero"/>
			<result property="Concession" column="Concession"/>
			<result property="GiveAway" column="GiveAway"/>
		</resultMap>
		<resultMap id="SearchNewAndOldCusotmerConsumeCount" class="Order">
			<result property="OrderCount" column="OrderCount"/>
			<result property="PaperCount" column="PaperCount"/>
			<result property="SumAmount" column="Sum_Amount"/>
			<result property="Memo" column="Memo"/>
		</resultMap>
		<resultMap id="ExceptionMemberCustomerConsume" class="Order">
			<result property="MemberCardId" column="Member_Card_Id"/>
			<result property="CustomerName" column="CustomerName"/>
			<result property="MemberCardNo" column="MemberCardNo"/>
			<result property="SumAmount" column="sumAmount"/>
			<result property="Name" column="name"/>
			<result property="Memo" column="Memo"/>
		</resultMap>
		<resultMap id="ExceptionConsumeCustomer" class="Order">
			<result property="CustomerId" column="Customer_Id"/>
			<result property="CustomerName" column="CustomerName"/>
			<result property="SumAmount" column="sumAmount"/>
			<result property="Name" column="name"/>
			<result property="Memo" column="Memo"/>
		</resultMap>
		<resultMap id="SelectOrderAllUserByOrderId" class="Order">
			<result property="Id" column="ID"/>
			<result property="CustomerId" column="Order_Item_Id"/>
			<result property="MemberCardId" column="Employee_Id"/>
			<result property="SumAmount" column="Amount"/>
		</resultMap>
		<resultMap id="SelectOrderReceptionAndCashUserByOrderIdResult" class="Order">
			<result property="Id" column="new_order_user_id"/>
			<result property="MemberCardId" column="Cash_User_Id"/>
			<result property="SumAmount" column="Sum_Amount"/>
		</resultMap>
		<resultMap id="selectResult_Prepay" class="Order">
			<result property="Id" column="ID" dbType="bigint"/>
			<result property="CustomerId" column="CUSTOMER_ID" dbType="bigint"/>
			<result property="MemberCardId" column="MEMBER_CARD_ID" dbType="bigint"/>
			<result property="No" column="NO" dbType="varchar"/>
			<result property="CustomerType" column="CUSTOMER_TYPE" dbType="int"/>
			<result property="CustomerName" column="CUSTOMER_NAME" dbType="nvarchar"/>
			<result property="Name" column="NAME" dbType="nvarchar"/>
			<result property="ProjectName" column="PROJECT_NAME" dbType="nvarchar"/>
			<result property="PayType" column="PAY_TYPE" dbType="int"/>
			<result property="PrepareMoney" column="PREPARE_MONEY" dbType="char"/>
			<result property="PrepareMoneyAmount" column="PREPARE_MONEY_AMOUNT" dbType="decimal"/>
			<result property="NeedTicket" column="NEED_TICKET" dbType="char"/>
			<result property="DeliveryType" column="DELIVERY_TYPE" dbType="int"/>
			<result property="DeliveryDateTime" column="DELIVERY_DATE_TIME" dbType="datetime"/>
			<result property="SumAmount" column="SUM_AMOUNT" dbType="decimal"/>
			<result property="Memo" column="MEMO" dbType="nvarchar"/>
			<result property="NotPayTicketAmount" column="NOT_PAY_TICKET_AMOUNT" dbType="decimal"/>
			<result property="RealPaidAmount" column="REAL_PAID_AMOUNT" dbType="decimal"/>
			<result property="PaidAmount" column="PAID_AMOUNT" dbType="decimal"/>
			<result property="PaidTicket" column="PAID_TICKET" dbType="char"/>
			<result property="Status" column="STATUS" dbType="int"/>
			<result property="BalanceDateTime" column="BALANCE_DATE_TIME" dbType="datetime"/>
			<result property="Deleted" column="DELETED" dbType="char"/>
			<result property="InsertDateTime" column="INSERT_DATE_TIME" dbType="datetime"/>
			<result property="InsertUser" column="INSERT_USER" dbType="bigint"/>
			<result property="UpdateDateTime" column="UPDATE_DATE_TIME" dbType="datetime"/>
			<result property="UpdateUser" column="UPDATE_USER" dbType="bigint"/>
			<result property="Version" column="VERSION" dbType="int"/>
			<result property="CompanyId" column="COMPANY_ID" dbType="bigint"/>
			<result property ="HasPrePaidMoney" column ="HasPrePaidMoney" dbType ="decimal"/>
			<result property ="NeedPrePay" column ="NeedPrePay" dbType ="decimal"/>
			<result property="BranchShopId" column="BRANCH_SHOP_ID" dbType="bigint"/>
			<result property="OrderItemList" column="ID" select="OrderBase.SelectOrderItem" nullValue="0" lazyLoad="true"/>
			<result property="NewOrderUser" column="NEW_ORDER_USER_ID" select="UserBase.SelectByPk" nullValue="0" lazyLoad="true"/>
			<result property="CashUser" column="CASH_USER_ID" select="UserBase.SelectByPk" nullValue="0" lazyLoad="true"/>
		</resultMap>
		<resultMap id="selectResult_PrepayMap" class="Order">
	    <result property="Id" column="Id" dbType="bigint"/>
		<result property="CustomerId" column="Customer_Id" dbType="bigint"/>
		<result property="CustomerName" column="CustomerName" dbType="varchar"/>
		<result property="InsertDateTime" column="Insert_Date_Time" dbType="datetime"/>
		<result property="BalanceDateTime" column="Balance_Date_Time" dbType="datetime"/>
		<result property="No" column="No" dbType="varchar"/>
		<result property="SumAmount" column="Sum_Amount" dbType="decimal"/>
		<result property="PrepareMoneyAmount" column="Prepare_Money_Amount" dbType="decimal"/>
    </resultMap>
    <resultMap id="GetOrderPrepayAmountTotalAndSumAmountTotalMap" class="Order">
      <result property="SumAmount" column="SumAmountTotal"/>
      <result property="PrepareMoneyAmount" column="PrepareMoneyAmountTotal"/>
    </resultMap>
	<resultMap id="selectResult_HasPrepay" class="Order">
		<result property="Id" column="ID" dbType="bigint"/>
		<result property="CustomerId" column="CUSTOMER_ID" dbType="bigint"/>
		<result property="MemberCardId" column="MEMBER_CARD_ID" dbType="bigint"/>
		<result property="No" column="NO" dbType="varchar"/>
		<result property="CustomerType" column="CUSTOMER_TYPE" dbType="int"/>
		<result property="CustomerName" column="CUSTOMER_NAME" dbType="nvarchar"/>
		<result property="Name" column="NAME" dbType="nvarchar"/>
		<result property="ProjectName" column="PROJECT_NAME" dbType="nvarchar"/>
		<result property="PayType" column="PAY_TYPE" dbType="int"/>
		<result property="PrepareMoney" column="PREPARE_MONEY" dbType="char"/>
		<result property="PrepareMoneyAmount" column="PREPARE_MONEY_AMOUNT" dbType="decimal"/>
		<result property="NeedTicket" column="NEED_TICKET" dbType="char"/>
		<result property="DeliveryType" column="DELIVERY_TYPE" dbType="int"/>
		<result property="DeliveryDateTime" column="DELIVERY_DATE_TIME" dbType="datetime"/>
		<result property="SumAmount" column="SUM_AMOUNT" dbType="decimal"/>
		<result property="Memo" column="MEMO" dbType="nvarchar"/>
		<result property="NotPayTicketAmount" column="NOT_PAY_TICKET_AMOUNT" dbType="decimal"/>
		<result property="RealPaidAmount" column="REAL_PAID_AMOUNT" dbType="decimal"/>
		<result property="PaidAmount" column="PAID_AMOUNT" dbType="decimal"/>
		<result property="PaidTicket" column="PAID_TICKET" dbType="char"/>
		<result property="Status" column="STATUS" dbType="int"/>
		<result property="BalanceDateTime" column="BALANCE_DATE_TIME" dbType="datetime"/>
		<result property="Deleted" column="DELETED" dbType="char"/>
		<result property="InsertDateTime" column="INSERT_DATE_TIME" dbType="datetime"/>
		<result property="InsertUser" column="INSERT_USER" dbType="bigint"/>
		<result property="UpdateDateTime" column="UPDATE_DATE_TIME" dbType="datetime"/>
		<result property="UpdateUser" column="UPDATE_USER" dbType="bigint"/>
		<result property="Version" column="VERSION" dbType="int"/>
		<result property="CompanyId" column="COMPANY_ID" dbType="bigint"/>
		<result property="BranchShopId" column="BRANCH_SHOP_ID" dbType="bigint"/>
		<result property="HasPrePaidMoney" column ="ID" select="GatheringOrder.GetHasPrePaidAmount" dbType ="decimal"/>
		<result property="OrderItemList" column="ID" select="OrderBase.SelectOrderItem" nullValue="0" lazyLoad="true"/>
		<result property="NewOrderUser" column="NEW_ORDER_USER_ID" select="UserBase.SelectByPk" nullValue="0" lazyLoad="true"/>
		<result property="CashUser" column="CASH_USER_ID" select="UserBase.SelectByPk" nullValue="0" lazyLoad="true"/>
	</resultMap>
	<resultMap id="selectAccountReceviableAcctordingToSectTotal" class="Order">
		<result property="CustomerId" column="Customer_ID" dbType="bigint"/>
		<result property="CustomerName" column="Customer_Name" dbType="nvarchar"/>
		<!--<result property="BalanceDateTime" column="BalanceDateTime" dbType="datetime"/>-->
		<result property="AccountReceviableOweMomeyTotal" column="OweMomeyTotal" dbType="decimal"/>
		<!--<result property="Status" column="Status" dbType="int"/>-->
		<result property="Memo" column="Memo" dbType="nvarchar"/>
	</resultMap>
	<resultMap id="DailyPaper" class="Order">
		<result property="Id" column="Id"/>
		<result property="PaidAmount" column="PaidAmount"/>
		<result property="AccountReceviableOweMomeyTotal" column="OweMomeyTotal"/>
		<result property="No" column="NO"/>
		<result property="NotPayTicketAmount" column="NotPayTicketAmount"/>
		<result property="BalanceDateTime" column="BALANCE_DATE_TIME"/>
		<result property="InsertDateTime" column="INSERT_DATE_TIME"/>
	</resultMap>
	<resultMap id="GetOrderItemListMap" class="Order">
		<result property="Id" column="orderId"/>
		<result property="PriceProcessName" column="PriceProcessName"/>
		<result property="ProcessContentId" column="processId"/>
		<result property="BusinessTypeId" column="businessTypeId"/>
		<result property="MemberCardId" column="Member_Card_Id"/>
		<result property="ItemAmount" column="ItemAmount"/>
	</resultMap>
	</resultMaps>
	<statements>
		<select id="SelectDailyOrder" parameterClass="Order"  resultMap="SelectDailyOrderResult">
			<![CDATA[
			SELECT A.ID,A.NO,B.NAME AS CUSTOMERNAME,C.NAME AS CUSTOMERTYPENAME,A.INSERT_DATE_TIME,
			A.DELIVERY_TYPE,A.DELIVERY_DATE_TIME,D.NAME AS USERSNAME,
			A.STATUS,A.MEMO
			FROM ORDERS A
			INNER JOIN CUSTOMER B ON A.CUSTOMER_ID =B.ID
			INNER JOIN CUSTOMER_TYPE C ON B.CUSTOMER_TYPE_ID=C.ID
			INNER JOIN EMPLOYEE D ON A.INSERT_USER=D.ID 
            where A.status<>#Status# AND A.STATUS<>#Id# AND A.DELETED='0' and a.Company_Id=#CompanyId#
			]]>
			<dynamic>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 a.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
			<![CDATA[
		    ORDER BY a.INSERT_DATE_TIME DESC
		   ]]>
		</select>
		<select id="GetPrePayAmount" parameterClass="Order" resultClass="decimal">
			<![CDATA[
			SELECT     ISNULL(SUM(dbo.GATHERING.AMOUNT),0) AS GatheringAmount
			FROM         dbo.GATHERING_ORDERS INNER JOIN
			dbo.GATHERING ON dbo.GATHERING_ORDERS.GATHERING_ID = dbo.GATHERING.ID
			WHERE     (dbo.GATHERING_ORDERS.ORDERS_ID = #Id#) AND (dbo.GATHERING_ORDERS.PAY_KIND = #No#)
		   ]]>
		</select>
		<select id="SelectDailyOrderPager" parameterClass="Order"  resultMap="SelectDailyOrderResult">
			<!--<![CDATA[
			SELECT top (#Status1#) A.ID,A.NO,a.CUSTOMER_NAME CUSTOMERNAME,C.employeeName AS CUSTOMERTYPENAME,A.INSERT_DATE_TIME,
			A.DELIVERY_TYPE,A.DELIVERY_DATE_TIME,D.NAME AS USERSNAME,
			A.STATUS,A.MEMO
			FROM ORDERS A
			INNER JOIN CUSTOMER B ON A.CUSTOMER_ID =B.ID
			left join (
				select top (1) a.orders_id,c.name employeeName from order_item a 
				left join order_item_employee b on a.id=b.order_item_id
				left join employee c on b.employee_id=c.id
			) c on a.id=c.orders_id
			inner join users e on a.insert_user=e.id
			INNER JOIN EMPLOYEE D ON e.employee_id=D.ID 
            where  A.DELETED='0' and a.Company_Id=#CompanyId# 
			and a.Insert_Date_Time>=Convert(varchar(10),getDate(),121) and a.Insert_Date_Time<=Convert(varchar(10),getDate()+1,121)

			]]>
			<dynamic>
				<isNotNull prepend="and" property="OrderAll">
					<![CDATA[A.status<>#Status# AND A.STATUS<>#Id#]]>
				</isNotNull>
				<isNull prepend="and" property="OrderAll" >
					<![CDATA[(1=2]]>
				</isNull>
				<isNotNull prepend="or" property="OrderNoDispatch">
					<![CDATA[
					A.status=#OrderNoDispatch#
					]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderBlankOut">
					<![CDATA[A.status=#OrderBlankOut#]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderWorking">
					<![CDATA[A.status=#OrderWorking#]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderSuccessed">
					<![CDATA[A.status=#OrderSuccessed#]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderFinished">
					<![CDATA[A.status=#OrderFinished#]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderNoPrepay">
					<![CDATA[A.status=#OrderNoPrepay#]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderNoClosed">
					<![CDATA[A.status=#OrderNoClosed#]]>
				</isNotNull>
				<isNull prepend="" property="OrderAll">
					<![CDATA[ ) ]]>
				</isNull>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 a.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
			<![CDATA[
				and a.ID not in(
					select 
					top (#Status1#*#Status2#) id 
					from orders 
					where deleted='0' 
					and company_id=#CompanyId# and Branch_shop_id=#BranchShopId#
					and Insert_Date_Time>=Convert(varchar(10),getDate(),121) and Insert_Date_Time<=Convert(varchar(10),getDate()+1,121)
				]]>
			<dynamic>
				<isNotNull prepend="and" property="OrderAll">
					<![CDATA[
						status<>#Status# AND STATUS<>#Id# 
					]]>
				</isNotNull>
				<isNull prepend="and" property="OrderAll" >
					<![CDATA[
					(1=2
					]]>
				</isNull>
				<isNotNull prepend="or" property="OrderNoDispatch">
					<![CDATA[
					status=#OrderNoDispatch#
					]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderBlankOut">
					<![CDATA[
					status=#OrderBlankOut#
					]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderWorking">
					<![CDATA[
					status=#OrderWorking#
					]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderSuccessed">
					<![CDATA[
					status=#OrderSuccessed#
					]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderFinished">
					<![CDATA[
					status=#OrderFinished#
					]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderNoPrepay">
					<![CDATA[
					status=#OrderNoPrepay#
					]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderNoClosed">
					<![CDATA[
					status=#OrderNoClosed#
					]]>
				</isNotNull>
				<isNull prepend="" property="OrderAll">
					<![CDATA[
					)
					]]>
				</isNull>		
			</dynamic>
			<![CDATA[
				ORDER BY Id DESC
				)
				]]>
			
			<![CDATA[
				ORDER BY a.Id DESC
			]]>-->
			<![CDATA[
			SELECT
			top(#Status1#)
			Aa.ID,Aa.NO,aa.CUSTOMER_NAME CUSTOMERNAME,
			C.employeeName AS CUSTOMERTYPENAME,Aa.INSERT_DATE_TIME,
			Aa.DELIVERY_TYPE,Aa.DELIVERY_DATE_TIME,D.NAME AS USERSNAME,
			Aa.STATUS,Aa.MEMO
			FROM ORDERS aa
			INNER JOIN CUSTOMER B ON Aa.CUSTOMER_ID =B.ID
			left join (
			select top (1) oi.orders_id,c.name employeeName from order_item oi
			left join order_item_employee b on oi.id=b.order_item_id
			left join employee c on b.employee_id=c.id
			) c on aa.id=c.orders_id
			inner join users e on aa.insert_user=e.id
			INNER JOIN EMPLOYEE D ON e.employee_id=D.ID
			where  aa.DELETED='0'
			and aa.Company_Id=#CompanyId#
			and aa.Insert_Date_Time>=#InsertDateTimeString#
			and aa.Insert_Date_Time<=#BalanceDateTimeString#
			]]>
			<dynamic>
				<isNotNull prepend="and" property="OrderAll">
					<![CDATA[status<>#Status# AND STATUS<>#Id#]]>
				</isNotNull>
				<isNull prepend="and" property="OrderAll" >
					<![CDATA[
					(1=2
					]]>
				</isNull>
				<isNotNull prepend="or" property="OrderNoDispatch">
					<![CDATA[status=#OrderNoDispatch#]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderBlankOut">
					<![CDATA[status=#OrderBlankOut#]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderWorking">
					<![CDATA[status=#OrderWorking#]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderSuccessed">
					<![CDATA[status=#OrderSuccessed#]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderFinished">
					<![CDATA[status=#OrderFinished#]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderNoPrepay">
					<![CDATA[status=#OrderNoPrepay#]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderNoClosed">
					<![CDATA[status=#OrderNoClosed#]]>
				</isNotNull>
				<isNull prepend="" property="OrderAll">
					<![CDATA[
					)
					]]>
				</isNull>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 aa.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
			and aa.Id not in(
				<![CDATA[
				SELECT top(#Status1#*#Status2#)
				A.ID
				FROM ORDERS A
				where  A.DELETED='0'
				and a.Company_Id=#CompanyId#
				and a.Insert_Date_Time>=#InsertDateTimeString#
				and a.Insert_Date_Time<=#BalanceDateTimeString#
				]]>
				<dynamic>
					<isNotNull prepend="and" property="OrderAll">
						<![CDATA[status<>#Status# AND STATUS<>#Id#]]>
					</isNotNull>
					<isNull prepend="and" property="OrderAll" >
						<![CDATA[
						(1=2
						]]>
					</isNull>
					<isNotNull prepend="or" property="OrderNoDispatch">
						<![CDATA[status=#OrderNoDispatch#]]>
					</isNotNull>
					<isNotNull prepend="or" property="OrderBlankOut">
						<![CDATA[status=#OrderBlankOut#]]>
					</isNotNull>
					<isNotNull prepend="or" property="OrderWorking">
						<![CDATA[status=#OrderWorking#]]>
					</isNotNull>
					<isNotNull prepend="or" property="OrderSuccessed">
						<![CDATA[status=#OrderSuccessed#]]>
					</isNotNull>
					<isNotNull prepend="or" property="OrderFinished">
						<![CDATA[status=#OrderFinished#]]>
					</isNotNull>
					<isNotNull prepend="or" property="OrderNoPrepay">
						<![CDATA[status=#OrderNoPrepay#]]>
					</isNotNull>
					<isNotNull prepend="or" property="OrderNoClosed">
						<![CDATA[status=#OrderNoClosed#]]>
					</isNotNull>
					<isNull prepend="" property="OrderAll">
						<![CDATA[
						)
						]]>
					</isNull>
					<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
						<![CDATA[
					 a.branch_shop_id=#BranchShopId#
					]]>
					</isNotEqual>
				</dynamic>
				order by a.id desc
			)
			order by aa.id desc
		</select>
		<select id="GetDailyOrderCount" parameterClass="Order" resultClass="int">
			<!--<![CDATA[
			select count(*)	FROM ORDERS A
			INNER JOIN CUSTOMER B ON A.CUSTOMER_ID =B.ID
			INNER JOIN CUSTOMER_TYPE C ON B.CUSTOMER_TYPE_ID=C.ID
			inner join users e on a.insert_user=e.id
			INNER JOIN EMPLOYEE D ON e.employee_id=D.ID 
			where A.DELETED='0' and a.Company_Id=#CompanyId# 
			and a.Insert_Date_Time>=Convert(varchar(10),getDate(),121) and a.Insert_Date_Time<=Convert(varchar(10),getDate()+1,121)
			]]>
			<dynamic>
				<isNotNull prepend="and" property="OrderAll">
					<![CDATA[
						A.status<>#Status# AND A.STATUS<>#Id# 
					]]>
				</isNotNull>
				<isNull prepend="and" property="OrderAll" >
					<![CDATA[
					(1=2
					]]>
				</isNull>
				<isNotNull prepend="or" property="OrderNoDispatch">
					<![CDATA[
					A.status=#OrderNoDispatch#
					]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderBlankOut">
					<![CDATA[
					A.status=#OrderBlankOut#
					]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderWorking">
					<![CDATA[
					A.status=#OrderWorking#
					]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderSuccessed">
					<![CDATA[
					A.status=#OrderSuccessed#
					]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderFinished">
					<![CDATA[
					A.status=#OrderFinished#
					]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderNoPrepay">
					<![CDATA[
					A.status=#OrderNoPrepay#
					]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderNoClosed">
					<![CDATA[
					A.status=#OrderNoClosed#
					]]>
				</isNotNull>
				<isNull prepend="" property="OrderAll">
					<![CDATA[
					)
					]]>
				</isNull>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 a.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>-->
			<![CDATA[
			SELECT
			count(A.ID)
			FROM ORDERS A
			where  A.DELETED='0'
			and a.Company_Id=#CompanyId#
			and a.Insert_Date_Time>=#InsertDateTimeString#
			and a.Insert_Date_Time<=#BalanceDateTimeString#
			]]>
			<dynamic>
				<isNotNull prepend="and" property="OrderAll">
					<![CDATA[status<>#Status# AND STATUS<>#Id#]]>
				</isNotNull>
				<isNull prepend="and" property="OrderAll" >
					<![CDATA[
						(1=2
						]]>
				</isNull>
				<isNotNull prepend="or" property="OrderNoDispatch">
					<![CDATA[status=#OrderNoDispatch#]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderBlankOut">
					<![CDATA[status=#OrderBlankOut#]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderWorking">
					<![CDATA[status=#OrderWorking#]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderSuccessed">
					<![CDATA[status=#OrderSuccessed#]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderFinished">
					<![CDATA[status=#OrderFinished#]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderNoPrepay">
					<![CDATA[status=#OrderNoPrepay#]]>
				</isNotNull>
				<isNotNull prepend="or" property="OrderNoClosed">
					<![CDATA[status=#OrderNoClosed#]]>
				</isNotNull>
				<isNull prepend="" property="OrderAll">
					<![CDATA[
						)
						]]>
				</isNull>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 a.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
		</select>
		<select id="SelectOrderInfoByOrderId" parameterClass="Order" resultMap="SelectOrderInfoByOrderIdResult">
		<![CDATA[
				select a.ID,a.NO,a.CUSTOMER_ID,a.status,a.Paid_Ticket,a.Real_Paid_Amount,a.Not_Pay_Ticket_Amount,c.SECONDARY_TRADE_ID AS TRADE_ID,A.MEMBER_CARD_ID,a.Customer_name as CUSTOMERNAME,a.CUSTOMER_TYPE,d.name as CUSTOMERTYPENAME ,c.Last_link_man as LinkManName,c.last_tel_no as LastTelNo,a.DELIVERY_TYPE
				,a.NEED_TICKET,a.DELIVERY_DATE_TIME,b.member_card_no as MemberCardNo,a.Project_Name,
				a.pay_type,a.prepare_money_amount,a.prepare_money,a.sum_amount,a.Memo,a.insert_date_time,a.insert_User New_Order_User_Id,a.Cash_User_Id,a.Paid_Ticket_Amount
				from orders a
				left join member_card b on a.member_card_id=b.id
				inner join customer c  on a.customer_id=c.id
				inner join customer_type d on a.customer_Type=d.id
				where a.id=#Id# and a.Deleted='0' and a.Company_Id=#CompanyId#
			]]>
		<dynamic>
			<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
				<![CDATA[
					 a.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>				
			</dynamic>
		</select>
		<update id="UpdatePrepayOrder" parameterClass="Order" >
			<![CDATA[
				update orders 
        set PREPARE_MONEY=#PrepareMoney#,
            PREPARE_MONEY_AMOUNT=PREPARE_MONEY_AMOUNT+#PrepareMoneyAmount#
            where no=#No# and Deleted='0' and Company_Id=#CompanyId# 
			]]>
			<dynamic>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
		</update>		
		<update id="UpdateTheOrderStatusToFacturing" parameterClass="Order" >
			<![CDATA[
				update orders set status=#Status# where no=#No# and Deleted='0' and Company_Id=#CompanyId# 
			]]>
			<dynamic>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
		</update>
		<select id="SelectOrderIdByOrderNo" parameterClass="Order" resultClass="int">
			<![CDATA[
				select id from ORDERS where NO=#No# and Deleted='0' and Company_Id=#CompanyId# 
			]]>
			<dynamic>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
		</select>
		<update id="ConbinationUpdateCustomerId" parameterClass="map">
			update orders set customer_id = #NewCustomerId# where customer_id = #OldCustomerId#
		</update>
		<select id="SelectCustomerInOrder" parameterClass="map" resultCalss="long">
			SELECT
			count(*)
			FROM ORDERS
			Where DELETED = '0'
			AND CUSTOMER_ID = #CustomerId#
      And Company_Id=#CompanyId#
      <isNotNull prepend="And" property="BranchShopId">
        branch_shop_Id=#BranchShopId#
      </isNotNull>
		</select>
		<select id="SelectDelivery" parameterClass="Employee" resultCalss="string">
			select em.name
			from DELIVERY_ORDER as do inner join employee as em
			on do.employee_id = em.id
			where do.orders_id = (
			select id from orders where [No]= #No# and company_id=#CompanyId#
			<dynamic>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
			)
		</select>
    
		<!--工单查询-->
		<select id="SearchOrdersPagination" parameterClass="map" resultMap="selectResult1">
      select distinct top (#RowCount#) a.id as ordersid,
      a.No,a.Insert_Date_Time,
      a.SUM_AMOUNT,a.BALANCE_DATE_TIME,
      b.name as CustomerName,
      emm.Name CashName,
      a.Memo,em.Name as NewOrderName
      from orders as a
      <isNotNull property="MemberCardNo">
        INNER JOIN MEMBER_CARD AS MC ON a.MEMBER_CARD_ID = MC.ID
      </isNotNull>
      INNER join Users as u on u.id=a.insert_User
      INNEr join Employee as em on em.id=u.Employee_Id
      INNer join Customer as b on a.Customer_Id=b.Id
      Inner join Users as us on us.Id=a.Cash_User_Id
      Inner join employee as emm on emm.Id=us.Employee_Id
      WHERE a.DELETED = '0'  and a.Company_Id=#CompanyId# and a.Status=#Status#
      <dynamic>
        <isNotNull prepend="AND" property="NO">
          a.NO like #NO#
        </isNotNull>
        <isNotNull prepend="AND" property="MemberCardNo">
          MC.Member_Card_No like #MemberCardNo#
        </isNotNull>
        <isNotNull prepend="AND" property="Money">
          a.SUM_AMOUNT $SelectCondition$ #Money#
        </isNotNull>
        <isNotNull prepend="AND" property="CustomerName">
          a.CUSTOMER_NAME like #CustomerName#
        </isNotNull>
        <isNotNull prepend="AND" property="BeginDate">
          <![CDATA[a.INSERT_DATE_TIME >=  #BeginDate# ]]>
        </isNotNull>
        <isNotNull prepend="AND" property="EndDate">
          <![CDATA[a.INSERT_DATE_TIME<= #EndDate# ]]>
        </isNotNull>
        <isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
          <![CDATA[ a.branch_shop_id=#BranchShopId# ]]>
        </isNotEqual>
      </dynamic>
      and a.id not in(
      select top (#RowCount#*#PagerCount#) mm.id from(
      select ee.id from orders  as ee
      <isNotNull property="MemberCardNo">
        INNER JOIN MEMBER_CARD AS MC ON ee.MEMBER_CARD_ID = MC.ID
      </isNotNull>
      INNER join Users as u on u.id=ee.Insert_User
      INNEr join Employee as em on em.id=u.Employee_Id
      INNer join Customer as b on ee.Customer_Id=b.Id
      Inner join Users as us on us.Id=ee.Cash_User_Id
      Inner join employee as emm on emm.Id=us.Employee_Id
      WHERE ee.DELETED = '0'  and ee.Company_Id=#CompanyId# and ee.Status=#Status#
      <dynamic>
        <isNotNull prepend="AND" property="NO">
          ee.NO like #NO#
        </isNotNull>
        <isNotNull prepend="AND" property="MemberCardNo">
          MC.Member_Card_No like #MemberCardNo#
        </isNotNull>
        <isNotNull prepend="AND" property="Money">
          ee.SUM_AMOUNT $SelectCondition$ #Money#
        </isNotNull>
        <isNotNull prepend="AND" property="CustomerName">
          ee.CUSTOMER_NAME like #CustomerName#
        </isNotNull>
        <isNotNull prepend="AND" property="BeginDate">
          <![CDATA[ee.INSERT_DATE_TIME>=  #BeginDate# ]]>
        </isNotNull>
        <isNotNull prepend="AND" property="EndDate">
          <![CDATA[ee.INSERT_DATE_TIME<= #EndDate# ]]>
        </isNotNull>
        <isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
          <![CDATA[ ee.branch_shop_id=#BranchShopId# ]]>
        </isNotEqual>
      </dynamic>
      )mm
      order  by  mm.id asc
      )
      order by a.id asc
    </select>
		<select id="SearchOrders" parameterClass="map" resultMap="selectResult1">
			select
			distinct a.id as ordersid,
			a.No,a.Insert_Date_Time,
			a.SUM_AMOUNT,a.BALANCE_DATE_TIME,
			a.Memo,em.Name as NewOrderName,
			emm.Name CashName,
			b.name as CustomerName
			from orders as a
			<isNotNull property="MemberCardNo">
			INNER JOIN MEMBER_CARD AS MC ON a.MEMBER_CARD_ID = MC.ID
		  </isNotNull>
		  INNER join Users as u on u.id=a.Insert_User
		  INNEr join Employee as em on em.id=u.Employee_Id
		  INNer join Customer as b on a.Customer_Id=b.Id
		  Inner join Users as us on us.Id=a.Cash_User_Id
		  Inner join employee as emm on emm.Id=us.Employee_Id
		  WHERE a.DELETED = '0'  and a.Company_Id=#CompanyId# and a.Status=#Status#
		  <dynamic>
			<isNotNull prepend="AND" property="NO">
			  a.NO like #NO#
			</isNotNull>
			<isNotNull prepend="AND" property="MemberCardNo">
			  MC.Member_Card_No like #MemberCardNo#
			</isNotNull>
			<isNotNull prepend="AND" property="Money">
			  a.SUM_AMOUNT $SelectCondition$ #Money#
			</isNotNull>
			<isNotNull prepend="AND" property="CustomerName">
			  a.CUSTOMER_NAME like #CustomerName#
			</isNotNull>
			<isNotNull prepend="AND" property="BeginDate">
			  <![CDATA[a.INSERT_DATE_TIME>=  #BeginDate# ]]>
			</isNotNull>
			<isNotNull prepend="AND" property="EndDate">
			  <![CDATA[a.INSERT_DATE_TIME<= #EndDate# ]]>
			</isNotNull>
			<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
			  <![CDATA[a.branch_shop_id=#BranchShopId#]]>
			</isNotEqual>
		  </dynamic>
		  order by a.id
		</select>
		<select id="GetSearchOrderInfoCount" parameterClass="map" resultClass="long">
		  select count(*) from (
		  select distinct a.id as ordersid,
		  a.No,a.Insert_Date_Time,
		  a.SUM_AMOUNT,a.BALANCE_DATE_TIME,
		  b.name as CustomerName,
		  a.Memo,em.Name as NewOrderName
		  from orders as a
		  <isNotNull property="MemberCardNo">
			  INNER JOIN MEMBER_CARD AS MC ON a.MEMBER_CARD_ID = MC.ID
			</isNotNull>
		  INNER join Users as u on u.id=a.Insert_User
		  INNEr join Employee as em on em.id=u.Employee_Id
		  INNer join Customer as b on a.Customer_Id=b.Id
		  Inner join Users as us on us.Id=a.Cash_User_Id
		  Inner join employee as emm on emm.Id=us.Employee_Id
		  WHERE a.DELETED = '0'  and a.Company_Id=#CompanyId# and a.Status=#Status#
		  <dynamic>
			  <isNotNull prepend="AND" property="NO">
				a.NO like #NO#
			  </isNotNull>
			  <isNotNull prepend="AND" property="MemberCardNo">
				MC.Member_Card_No like #MemberCardNo#
			  </isNotNull>
			  <isNotNull prepend="AND" property="Money">
				a.SUM_AMOUNT $SelectCondition$ #Money#
			  </isNotNull>
			  <isNotNull prepend="AND" property="CustomerName">
				a.CUSTOMER_NAME like #CustomerName#
			  </isNotNull>
			<isNotNull prepend="AND" property="BeginDate">
			  <![CDATA[a.INSERT_DATE_TIME>=#BeginDate# ]]>
			</isNotNull>
			<isNotNull prepend="AND" property="EndDate">
			  <![CDATA[a.INSERT_DATE_TIME<= #EndDate# ]]>
			</isNotNull>
			<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
				<![CDATA[a.branch_shop_id=#BranchShopId#]]>
			  </isNotEqual>
			</dynamic>
		  ) z
		</select>
		<select id="SelectStageHandOverOrder"  resultMap="SelectStageHandOverOrderResult">
		  SELECT
		  ID,
		  NO,
		  DELIVERY_TYPE,
		  DELIVERY_DATE_TIME,
		  MEMO,
		  INSERT_DATE_TIME
		  FROM ORDERS
		  Where DELETED = '0'
		  AND insert_date_time between convert(nvarchar(10),getdate(),120) and convert(nvarchar(10),dateadd(day,1,getdate()),120)
		  ORDER BY insert_date_time DESC
		</select>
    
		<!--前台交班 提取数据；
			朱静程 2008-11-04
      张晓林 2009年4月12日18:14:21 修正为以下:
      1.列出当前用户操作时间段内 所有不是已完成或作废状态的工单			
      2.列出上次交班的工单这次并未结算的工单
		-->
		<select id="SelectFrontHandOverOrder"  resultMap="SelectFrontHandOverOrderResult">
		  select * from(
		  SELECT
		  o.ID,o.NO,o.Status,
		  o.DELIVERY_TYPE,o.DELIVERY_DATE_TIME,
		  o.MEMO,a.Name CustomerName,
		  o.INSERT_DATE_TIME
		  FROM ORDERS o with (nolock)
		  INNER Join Customer a on a.Id=o.Customer_Id
		  Where o.DELETED = '0'
		  AND (o.Status!=#NoStatus1#
		  and o.Status!=#NoStatus2#)
		  And o.Insert_User=#UserId#
		  and o.insert_Date_Time between #StartTime# and #EndTime#
		  and o.Company_Id=#CompanyId#
		  <dynamic>
			<isNotNull prepend="And" property="BranchShopId">
			  o.Branch_Shop_Id=#BranchShopId#
			</isNotNull>
		  </dynamic>
		  union ALL
	      
		  select
		  a.ID,a.NO,a.Status,
		  a.DELIVERY_TYPE,a.DELIVERY_DATE_TIME,
		  a.MEMO,c.Name CustomerName,
		  a.INSERT_DATE_TIME 
		  from orders a
		  Inner join Customer c on c.Id=a.Customer_Id
		  where a.Id in(
			select orders_Id from HAND_OVER_ORDERS
			where HAND_OVER_ID=#LastHandOverId#
		  )
		  and  a.deleted='0'
		  AND a.Status!=#NoStatus1#
		  And a.Status!=#NoStatus2#
		  and a.Company_Id=#CompanyId#
		  And a.Branch_Shop_Id=#BranchShopId#
		  )t order by t.status
		</select>
		<!--增加 联系电话(张晓林2008-12-17)-->
		<select id="SelectUnClosedOrder" parameterClass="Order" resultMap="Order.selectUnCloseOrder">
			<![CDATA[
			Select top(#Status#) a.*,b.Name as employeename,(select Last_Tel_No from Customer as c where c.id=a.customer_Id) as Last_Tel_No from Orders a
			inner join users c on a.insert_user=c.id
			inner join employee b on c.employee_id=b.id
			where (a.Status=#Status1# or a.STATUS=#Status2# OR a.STATUS=#Status3#) and a.Deleted='0' and a.Company_Id=#CompanyId#

			]]>
			<dynamic>
				<isNotEqual prepend="and" property="Id" compareValue="0">
					<![CDATA[
					a.ID=#Id#
					]]>
				</isNotEqual>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 a.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>				
			</dynamic>
			<![CDATA[
				and a.id not in (select top(#Status#*#CurrentPageIndex#) id from orders where (a.Status=#Status1# or status=#Status2# or status=#Status3#) and deleted='0' 
						and company_id=#CompanyId#
			]]>
			<dynamic>
				<isNotEqual prepend="and" property="Id" compareValue="0">
					<![CDATA[
					ID=#Id#
					]]>
				</isNotEqual>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
			<![CDATA[
			)
			]]>
		</select>
		<select id="SelectUnClosedOrderCount" parameterClass="Order" resultClass="int">
			<![CDATA[
			Select count(*) from Orders a
			inner join users c on a.insert_user=c.id
			inner join employee b on c.employee_id=b.id
			where ( a.STATUS=#Status2# OR a.STATUS=#Status3#) and a.Deleted='0' and a.Company_Id=#CompanyId#
			]]>
			<dynamic>
				<isNotEqual prepend="and" property="Id" compareValue="0">
					<![CDATA[
					a.ID=#Id#
					]]>
				</isNotEqual>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 a.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
		</select>		
		<update id="UpdateOrderForClose" parameterClass="Order" >
			<![CDATA[
				update orders set NEED_TICKET=#NeedTicket#, status=#Status#,PAY_TYPE=#PayType#,PAID_AMOUNT=#PaidAmount#,PAID_TICKET=#PaidTicket#,
				NOT_PAY_TICKET_AMOUNT=#NotPayTicketAmount#,PAID_TICKET_AMOUNT=#PaidTicketAmount#,REAL_PAID_AMOUNT=#RealPaidAmount#,balance_Date_Time=#BalanceDateTime#,
				Cash_User_ID=#CashUser.Id#,UPDATE_DATE_TIME = #UpdateDateTime#  ,UPDATE_USER = #UpdateUser#  ,VERSION = VERSION + 1 where ID=#Id# and deleted='0' and Company_Id=#CompanyId#
			]]>
			<dynamic>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
		</update>
    
		<!--应收款处理-->
		<select id="SelectNotHaveBeenPaidOrder" parameterClass="Order" resultMap="Order.selectArrearageResult">
			select * from
			(
			SELECT O.ID, O.NO, O.INSERT_DATE_TIME, O.BALANCE_DATE_TIME, O.SUM_AMOUNT, isnull(goo.amount,0) PAID_AMOUNT, isnull(spc.ZERO,0) ZERO, isnull(spc.CONCESSION,0) Concession,isnull(spc.CONCESSION1,0)Concession1,isnull(spc.CONCESSION2,0)Concession2
			FROM (SELECT ID, NO, INSERT_DATE_TIME, BALANCE_DATE_TIME, SUM_AMOUNT, PAID_AMOUNT, DELETED, COMPANY_ID, BRANCH_SHOP_ID FROM dbo.ORDERS
			WHERE (CUSTOMER_ID = #CustomerId#) AND (STATUS = #Status#) AND (DELETED = '0') and Company_Id=#CompanyId# and Branch_Shop_Id=#BranchShopId#) AS O
			left outer JOIN
			(SELECT  SUM(ISNULL(ZERO, 0)) AS ZERO, SUM(ISNULL(CONCESSION, 0)) AS CONCESSION,sum(ISNULL(CONCESSION1,0)) as CONCESSION1,sum(ISNULL(CONCESSION2,0)) as CONCESSION2, ORDERS_ID FROM
			(SELECT
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION WHERE (CONCESSION_TYPE = #Status1#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS ZERO,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_1 WHERE (CONCESSION_TYPE = #Status2#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_2 WHERE (CONCESSION_TYPE = #Status3#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION1,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_3 WHERE (CONCESSION_TYPE = #Status4#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION2,
			dbo.GATHERING_ORDERS.ORDERS_ID FROM  dbo.GATHERING_ORDERS INNER JOIN dbo.GATHERING ON dbo.GATHERING_ORDERS.GATHERING_ID = dbo.GATHERING.ID) AS SumPayCon
			GROUP BY ORDERS_ID) AS spc ON spc.ORDERS_ID = O.ID
			left outer  join
			(select go.orders_id,sum(isnull(g.amount,0)) amount from gathering g
			inner join gathering_orders go on g.id=go.gathering_id
			where g.deleted='0'
			and (go.pay_Kind=#LastTelNo# or go.pay_Kind=#LinkManName# or go.pay_kind=#Memo# or go.pay_kind=#OrderWorking# or go.pay_kind=#Address# or go.pay_kind=#CashName#)<!--付款类型为:1.预付款冲减;2.结算款;3.应收款;4会员卡冲减;5:预存款冲减(结算)；6:预存款冲减(应收款处理)-->
			group by go.orders_id) as goo on goo.orders_id=o.id
			) as a
			where (a.sum_amount-a.PAID_AMOUNT-a.ZERO-a.CONCESSION-a.CONCESSION1-a.CONCESSION2)>0 order by id

		</select>
		<update id="UpdateOrderForArearage" parameterClass="Order">
			 <![CDATA[
			update orders set Paid_Amount=Paid_Amount+#PaidAmount# where ID=#Id#
			]]>
		</update>
		<select id="AnalyzeDebtTime" parameterClass="Order" resultMap="Order.AnalyzeDebtTime">
			<![CDATA[
			select b.id,Max(b.name) CustomerName,sum(a.sum_amount) SumAmount,days
			from (select id, sum_amount,customer_id, balance_Date_Time,status,member_card_id,cash_user_id,Deleted,Company_Id,Branch_Shop_Id, 
			case 
			when DATEDIFF(day,balance_date_time, getdate()) <=10 then 10
			when DATEDIFF(day,balance_date_time, getdate()) <=30 then 30
			when DATEDIFF(day,balance_date_time, getdate()) <=60 then 60
			when DATEDIFF(day,balance_date_time, getdate()) <=90 then 90
			else 120
			end
			as days  
			from orders)a
			inner join customer b on a.customer_id=b.id and 
			(a.Customer_Id is not null and b.id=a.Customer_Id and (b.name like #Memo# or b.Simple_Name like #Memo#) or a.Customer_Id is null)
				
			left join member_card c on b.id=c.customer_id and (a.MEMBER_CARD_Id is not null and c.id = a.MEMBER_CARD_ID and c.MEMBER_CARD_No like #Memo# or a.MEMBER_CARD_ID is null)
			where a.status=#Status# and a.Deleted='0' and a.Company_Id=#CompanyId#
			]]>
			<dynamic>
				<isNotNull prepend="and" property="BalanceDateTimeString">
					<![CDATA[
					a.balance_Date_Time>=#BalanceDateTimeString# 
					]]>
				</isNotNull>
				<isNotNull prepend="and" property="InsertDateTimeString">
					<![CDATA[
					a.balance_Date_Time<=#InsertDateTimeString#
					]]>		
				</isNotNull>
				<isNotNull prepend="and" property="CashUser">
					<![CDATA[
					a.cash_user_id=#CashUser.Id#  
					]]>		
				</isNotNull>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 a.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
		</dynamic>
			<![CDATA[
			group by b.id,days
			order by b.id,days			
			]]>
		</select>
		<select id="AnalyzeAssistantDebtTime" parameterClass="Order" resultMap="Order.AnalyzeDebtTime">
			<![CDATA[
			select b.id,Max(b.name) CustomerName,sum(a.sum_amount) SumAmount,Max(days) days
			from (select id, sum_amount,customer_id, balance_Date_Time,status,member_card_id,cash_user_id,Deleted,Company_Id,Branch_Shop_Id, 
			case 
			when DATEDIFF(day,balance_date_time, getdate()) <=10 then 10
			when DATEDIFF(day,balance_date_time, getdate()) <=30 then 30
			when DATEDIFF(day,balance_date_time, getdate()) <=60 then 30
			when DATEDIFF(day,balance_date_time, getdate()) <=90 then 30
			else 120
			end
			as days  
			from orders)a
			inner join customer b on a.customer_id=b.id and 
			(a.Customer_Id is not null and b.id=a.Customer_Id and (b.name like #Memo# or b.Simple_Name like #Memo#) or a.Customer_Id is null)
			left join member_card c on b.id=c.customer_id and (a.MEMBER_CARD_Id is not null and c.id = a.MEMBER_CARD_ID and c.MEMBER_CARD_No like #Memo# or a.MEMBER_CARD_ID is null)
			where a.status=#Status# and a.Deleted='0' and a.Company_Id=#CompanyId#
			]]>
			<dynamic>
				<isNotNull prepend="and" property="BalanceDateTimeString">
					<![CDATA[
					a.balance_Date_Time>=#BalanceDateTimeString# 
					]]>
				</isNotNull>
				<isNotNull prepend="and" property="InsertDateTimeString">
					<![CDATA[
					a.balance_Date_Time<=#InsertDateTimeString#
					]]>
				</isNotNull>
				<isNotNull prepend="and" property="CashUser">
					<![CDATA[
					a.cash_user_id=#CashUser.Id#  
					]]>
				</isNotNull>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 a.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
			<![CDATA[
			group by b.id
			order by b.id,days			
			]]>
		</select>
		<select id="SelectCustomerConsume" parameterClass="Order" resultMap="SelectCustomerConsume">
			<![CDATA[
			select a.Customer_Id,max(a.Customer_Name) customerName,Max(c.orderCount) orderCount,sum(b.CASH_CONSUME_COUNT)+sum(b.PAPER_CONSUME_COUNT) papercount,sum(a.SUM_AMOUNT) sumAmount,max(a.memo) memo  from orders a 
			inner join order_Item b on a.id=b.orders_id
			inner join (select customer_id ,count(*) orderCount from orders where deleted='0' and Company_Id=#CompanyId#
			]]>
			<dynamic>
				<isNotNull prepend="and" property="BalanceDateTimeString">
					<![CDATA[
					balance_Date_Time>=#BalanceDateTimeString# 
					]]>
				</isNotNull>
				<isNotNull prepend="and" property="InsertDateTimeString">
					<![CDATA[
					balance_Date_Time<=#InsertDateTimeString#
					]]>
					<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
						<![CDATA[
					 branch_shop_id=#BranchShopId#
					]]>
					</isNotEqual>					
				</isNotNull>
			</dynamic>
			<![CDATA[
			group by customer_id) c on a.customer_id=c.customer_id
			where a.deleted='0' 
			]]>
			<dynamic>
				<isNotNull prepend="and" property="BalanceDateTimeString">
					<![CDATA[
					balance_Date_Time>=#BalanceDateTimeString# 
					]]>
				</isNotNull>
				<isNotNull prepend="and" property="InsertDateTimeString">
					<![CDATA[
					balance_Date_Time<=#InsertDateTimeString#
					]]>
				</isNotNull>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 a.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
			<![CDATA[
			group by a.customer_id
			order by a.customer_id
			]]>
		</select>
		<!--统计工单信息(收银交班) 张晓林2009年3月22日10:25:33 修正-->
		<select id="SelectCashHandOverOrder" parameterClass="map" resultMap="SelectCashHandOverOrderResult">
		  SELECT
		  k.ID,k.NO,
		  g.OweMomeyTotal as PREPARE_MONEY_AMOUNT,
		  k.MEMO,k.INSERT_DATE_TIME
		  FROM ORDERS k
		  Inner join(
			select a.Orders_Id, sum(b.Amount-isnull(c.preDiff,0)) OweMomeyTotal  from Gathering_orders a
			inner join Gathering b on a.Gathering_Id=b.Id
			left join
			(
			  select a.Orders_Id, b.Amount preDiff from Gathering_orders a
			  inner join Gathering b on a.Gathering_Id=b.Id
			  where a.pay_kind=#PayType2#
			  And b.DELETED='0'
			  And b.Gathering_Date_Time between #StartTime# and #EndTime#
			  And b.Insert_User=#UserId#
			  And b.Company_Id=#CompanyId#
			  And b.Branch_Shop_Id=#BranchShopId#
			)c on c.orders_id=a.orders_id
			where a.pay_kind=#PayType5# 
			And b.DELETED='0'
			And b.Gathering_Date_Time between #StartTime# and #EndTime#
			And b.Insert_User=#UserId#
			And b.Company_Id=#CompanyId#
			And b.Branch_Shop_Id=#BranchShopId#
			group by a.orders_Id
			having (sum(b.Amount-isnull(c.preDiff,0)))>0
		  ) g on g.Orders_Id=k.Id
		  where k.Status!=#Status1#  <!--除作废的工单外-->
		</select>
		<!-- 取得预付定金/笔数(收银交班) 张晓林2009年3月22日10:25:33 修正-->
		<select id="SelectDebtAmount" parameterClass="map" resultMap="Order.SelectDebtAmountResult">
		  select Sum(Amount-preDiff) DEBT_AMOUNT_SUM,count(*) DEBT_COUNT from(
		  select a.Orders_Id, b.Amount,isnull(c.preDiff,0)preDiff  from Gathering_orders a
		  inner join Gathering b on a.Gathering_Id=b.Id
		  left join
		  (
			select a.Orders_Id, b.Amount preDiff from Gathering_orders a
			inner join Gathering b on a.Gathering_Id=b.Id
			where a.pay_kind=#PayType2#<!--预付款冲减-->
			And b.DELETED='0'
			And b.Gathering_Date_Time between #StartTime# and #EndTime#
			And b.Insert_User=#UserId#
			And b.Company_Id=#CompanyId#
			And b.Branch_Shop_Id=#BranchShopId#
		  )c on c.orders_id=a.orders_id

		  where a.pay_kind=#PayType1# <!--预付款-->
		  And b.DELETED='0'
		  And b.Gathering_Date_Time between #StartTime# and #EndTime#
		  And b.Insert_User=#UserId#
		  And b.Company_Id=#CompanyId#
		  And b.Branch_Shop_Id=#BranchShopId#
		  )z     
		</select>
		<!--取得记帐笔数/记帐金额(收银交班) 张晓林2009年3月22日10:25:33 修正-->
		<select id="SelectKeepBusinessRecordAmount" parameterClass="map" resultMap="Order.SelectKeepBusinessRecordAmountResult">
			select
			Sum(OweMomeyTotal) as KEEP_BUSINESS_RECORD_AMOUNT_SUM,
			Count(*) as  KEEP_BUSINESS_RECORD_COUNT from(
			select e.Id,Sum(isnull(g.amount,0)) as PaidAmount,
			(sum(isnull(e.Sum_amount,0))-Sum(isnull(g.amount,0))-Sum(isnull(g.ConcessionAmount,0))) as OweMomeyTotal, e.[No],
			e.insert_Date_Time,
			e.Balance_Date_Time
			from Orders as e
			left join
			(
			select bb.orders_Id,bb.amount,cc.ConcessionAmount from (
			select orders_Id,Sum(isnull(b.Amount,0)) as amount from Gathering_Orders as a
			left join Gathering as b on a.Gathering_Id=b.Id
			where b.Deleted='0'
			and (a.pay_kind=#PayTypeBalance# or a.pay_kind=#PayTypePreDiff# or a.pay_kind=#PayTypeOwe# or a.pay_kind=#PayTypeMemberCardDiff# or a.pay_kind=#PreDeposits# or a.pay_kind=#AccountPreDepositsDiff#)<!-- 付款类型为:结算款+预付款冲减+收到的欠款+会员卡冲减-->
			and b.Insert_User=#UserId#
			And b.Company_Id=#CompanyId#
			and b.Insert_Date_Time between #StartTime# And #EndTime#
			and b.Branch_Shop_Id=#BranchShopId#
			Group by  Orders_Id
			) bb
			left join (
			select aa.Orders_Id,aa.ConcessionAmount from (
			select a.Orders_Id,sum(isnull(b.Concession_Amount,0)) as ConcessionAmount from Gathering_Orders as a
			left join PayMent_ConCession as b on b.Gathering_Id=a.gathering_Id
			where b.Deleted='0'
			and (a.pay_kind=#PayTypeBalance# or a.pay_kind=#PayTypePreDiff# or a.pay_kind=#PayTypeOwe# or a.pay_kind=#PayTypeMemberCardDiff# or a.pay_kind=#PreDeposits# or a.pay_kind=#AccountPreDepositsDiff#)<!--付款类型为:结算款+预付款冲减+收到的欠款+会员卡冲减-->
				and b.Insert_User=#UserId#
				And b.Company_Id=#CompanyId#
				and b.Insert_Date_Time between #StartTime# And #EndTime#
				and b.Branch_Shop_Id=#BranchShopId#
				Group by a.Orders_Id
				) aa
			  )cc on cc.Orders_Id=bb.Orders_ID
		  )as g on e.Id=g.orders_ID
		  where e.DELETED='0'
		  and Company_Id=#CompanyId#
		  and Branch_Shop_Id=#BranchShopId#
		  and balance_Date_Time between #StartTime# And #EndTime#
		  and update_user=#UserId#
		  and e.Status=#Status2# <!--已完成的工单-->
		  and Customer_Id in (select Id from Customer where Pay_Type=#PayType#)
		  group by g.Orders_ID,e.ID,e.No,e.insert_Date_Time,e.Balance_Date_Time,Paid_Amount
		  )m
		  where OweMomeyTotal>=0
		</select>

		<!--发票金额/发票笔数(收银交班)-->
		<select id="SelectTicketAmount" parameterClass="map" resultMap="Order.SelectTicketAmountResult">
		  select Sum(NotPayTicketAmount) as TICKET_AMOUNT_SUM ,count(*) as TicketCount from (
			select
			id,
			isnull(PAID_TICKET_AMOUNT,0) as NotPayTicketAmount
			from orders
			where Deleted='0'
			<!--and Insert_User=#UserId#-->
			And Status=#Status2#<!--已完成的工单-->
			And Company_Id=#CompanyId#
			and balance_Date_Time between #StartTime# And #EndTime#
			and Branch_Shop_Id=#BranchShopId#
		  )m
		</select>
    
		<!--工单查询(财务管理)-->
		<select id="SelectOrdersItem" parameterClass="map" resultMap ="OrderResultMap.selectResult">
			 select ord.*
			 from orders as ord 
			 <isNotNull property="Amount">
				 inner join (select sa.id, sa.amounts from  (select distinct sum(amount) as amounts, ord.id
				 from order_item as oi inner join orders as ord on oi.orders_id = ord.id
				 where ord.deleted = '0'
				 group by ord.id) as sa
				 where sa.amounts $AmountCondition$ #Amount#
				 ) as said on ord.id = said.id
			 </isNotNull>
			<isNotNull property="BusinessTypeId">
				inner join (select orders_id
				from order_item as oi
				where oi.business_type_id = #BusinessTypeId# and oi.deleted = '0'
				) as bsid on ord.id = bsid.orders_id
			</isNotNull>
			where ord.deleted = '0' and ord.status = #Status#
			<isNotNull prepend="AND" property="Price">
				ord.sum_amount $PriceCondition$ #Price#
			</isNotNull>
			<isNotNull prepend="AND" property="BeginDate">
				<![CDATA[
                    ord.insert_date_time between #BeginDate# and #EndDate#
                    ]]>
			</isNotNull>
			order by ord.id asc
		</select>
		<select id="SelectBranchShopTurnover" parameterClass="Order" resultMap="SelectBranchShopTurnover">
			<![CDATA[
			select c.id branchShopId, max(c.name) branchshopName,count(*) ordercount,sum(a.SUM_AMOUNT) sumAmount,sum(PAID_AMOUNT) PaidAmount,sum(a.SUM_AMOUNT)-sum(PAID_AMOUNT) arrearage ,max(a.memo) memo from orders a
			inner join order_Item d on a.id=d.orders_id and a.branch_shop_id=d.branch_shop_id and a.company_id=d.company_id
			inner join company b on a.company_id=b.id
			inner join BRANCH_SHOP c on a.branch_shop_id=c.id
			where a.Company_Id=#CompanyId# and a.deleted='0'
			]]>
			<dynamic>
				<isNotNull prepend="and" property="BalanceDateTimeString">
					<![CDATA[
					balance_Date_Time>=#BalanceDateTimeString# 
					]]>
				</isNotNull>
				<isNotNull prepend="and" property="InsertDateTimeString">
					<![CDATA[
					balance_Date_Time<=#InsertDateTimeString#
					]]>
				</isNotNull>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 a.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
			<![CDATA[
			group by b.id,c.id
			]]>
		</select>
		<select id="SelectCustomerPrepay" parameterClass="Order" resultMap="SelectCustomerPrepay">
		  <![CDATA[
				select a.customer_id,max(a.customer_Name) customerName,sum(PREPARE_MONEY_AMOUNT) PrepareMoneyAmount,max(d.gathering_date_time) GatheringDateTime,max(a.memo) Memo from orders a
				inner join customer b on a.customer_id=b.id
				inner join gathering_orders c on a.id=c.orders_id
				inner join gathering d on c.gathering_id=d.id
				where a.company_Id=#CompanyId# and a.deleted='0'
				]]>
		  <dynamic>
			<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
			  <![CDATA[
						a.branch_shop_id=#BranchShopId#
						]]>
			</isNotEqual>
			<isNotNull prepend="and" property="CustomerName">
			  <![CDATA[
						a.customer_name=#CustomerName#
						]]>
			</isNotNull>
			<isNotNull prepend="and" property="BalanceDateTimeString">
			  <![CDATA[
						balance_Date_Time>=#BalanceDateTimeString# 
						]]>
			</isNotNull>
			<isNotNull prepend="and" property="InsertDateTimeString">
			  <![CDATA[
						balance_Date_Time<=#InsertDateTimeString#
						]]>
			</isNotNull>
		  </dynamic>
		  <![CDATA[
				group by a.customer_id
				order by a.customer_id ASC
				]]>
		</select>
		<select id="SelectCustomerHistory" parameterClass="Order" resultMap="SelectCustomerHistory">
			<![CDATA[
			select a.*,b.name customername,b.address,b.last_tel_no,b.last_link_man,c.member_card_no from 
			(select customer_id,max(Member_Card_Id) member_card_id,count(*) orderCount,isnull(sum(sum_amount),0)/isnull(count(*),0) averageAmount,sum(sum_Amount) sumAmount,
			sum(isnull(real_paid_amount,0)-isnull(paid_amount,0)) arrearage from orders where deleted='0' and company_id=#CompanyId# 
			]]>
			<dynamic>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					Branch_Shop_Id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
			<![CDATA[
			group by customer_id) a
			inner join customer b on a.customer_id=b.id 
			inner join member_card c on a.member_card_id=c.id
			where member_card_no=#No# and b.name=#CustomerName#
			]]>
		</select>
		<select id="SelectCustomerOrdersHistory" parameterClass="Order" resultMap="SelectCustomerOrdersHistory">
			<![CDATA[
			SELECT T1.*,ISNULL(T2.Zero,0) AS Zero,ISNULL(T2.Concession,0) AS Concession  
			FROM (
				SELECT a.ID,a.No,a.BALANCE_DATE_TIME,a.SUM_AMOUNT,a.REAL_PAID_AMOUNT-a.PAID_AMOUNT AS Arrearage,a.PAID_AMOUNT
				FROM ORDERS a
				inner join member_card b on a.member_card_id=b.id
				WHERE a.deleted='0' and a.company_id=#CompanyId# 
				]]>
			<dynamic>
				<isNotNull prepend="and" property="CustomerName">
					<![CDATA[
					a.CUSTOMER_Name=#CustomerName#
					]]>
				</isNotNull>
				<isNotNull prepend="and" property="MemberCardNo">
					<![CDATA[
					b.member_card_no=#MemberCardNo#
					]]>	
				</isNotNull>
				<isNotEqual prepend="and" compareProperty="BranchShopId">
					<![CDATA[
					a.branch_shop_Id=#BranchShopId#	
					]]>
				</isNotEqual>
			</dynamic>
			<![CDATA[
			) T1
			LEFT JOIN 
			(
				SELECT T.ID,MAX(T.Zero) AS Zero,MAX(T.Concession) AS Concession FROM 
				(
					SELECT 
					T1.ID,
					CASE WHEN T4.CONCESSION_TYPE=1 THEN ISNULL(SUM(T4.CONCESSION_AMOUNT),0) END AS Zero,
					CASE WHEN T4.CONCESSION_TYPE=2 THEN ISNULL(SUM(T4.CONCESSION_AMOUNT),0) END AS Concession
					FROM
					(
						SELECT a.ID,a.BALANCE_DATE_TIME,a.SUM_AMOUNT FROM ORDERS a
						inner join member_card b on a.member_card_id=b.id
						WHERE a.company_id=#CompanyId# and a.deleted='0'
				]]>
					<dynamic>
						<isNotNull prepend="and" property="CustomerName">
							<![CDATA[
							a.CUSTOMER_Name=#CustomerName#
							]]>
						</isNotNull>
						<isNotNull prepend="and" property="MemberCardNo">
							<![CDATA[
							b.member_card_no=#MemberCardNo#
							]]>
						</isNotNull>
						<isNotEqual prepend="and" compareProperty="BranchShopId">
							<![CDATA[
							a.branch_shop_Id=#BranchShopId#	
							]]>
						</isNotEqual>
					</dynamic>
					<![CDATA[
					) T1
					LEFT JOIN GATHERING_ORDERS T2 ON T1.ID=T2.ORDERS_ID
					LEFT JOIN GATHERING T3 ON T2.GATHERING_ID =T3.ID
					LEFT JOIN PAYMENT_CONCESSION T4 ON T3.ID=T4.GATHERING_ID
					GROUP BY T1.ID,T4.CONCESSION_TYPE
				) T
				GROUP BY T.ID
			) T2
			ON T1.ID=T2.ID
			ORDER BY T1.ID		
			]]>
		</select>
		<select id="ExceptionPriceOrdersCount" parameterClass="Order" resultMap="ExceptionPriceOrdersCount">
			<![CDATA[
			SELECT T1.*,ISNULL(T2.Zero,0) AS Zero,ISNULL(T2.Concession,0) AS Concession,ISNULL(T2.GiveAway,0) AS GiveAway
			FROM	(
				SELECT 	T1.ID,T1.NO,T1.CUSTOMER_NAME,T1.SUM_AMOUNT,T1.REAL_PAID_AMOUNT,T1.PAID_AMOUNT,
				T2.NAME,T1.UPDATE_DATE_TIME,T1.MEMO,T1.Company_ID,T1.Branch_Shop_ID,T1.Deleted FROM ORDERS T1
				LEFT JOIN EMPLOYEE T2 ON T1.UPDATE_USER=T2.ID
				WHERE T1.STATUS=#Status# )T1
			LEFT JOIN
				( SELECT T.ID,MAX(T.Zero) AS Zero,MAX(T.Concession) AS Concession,MAX(T.GiveAway) AS GiveAway FROM 
					( SELECT T1.ID,CASE WHEN T4.CONCESSION_TYPE=1 THEN ISNULL(SUM(T4.CONCESSION_AMOUNT),0) END AS Zero,
						CASE WHEN T4.CONCESSION_TYPE=2 THEN ISNULL(SUM(T4.CONCESSION_AMOUNT),0) END AS Concession,
						CASE WHEN T4.CONCESSION_TYPE=3 THEN ISNULL(SUM(T4.CONCESSION_AMOUNT),0) END AS GiveAway
						FROM
						( SELECT ID,BALANCE_DATE_TIME,SUM_AMOUNT FROM ORDERS	) T1
					LEFT JOIN GATHERING_ORDERS T2 ON T1.ID=T2.ORDERS_ID
					LEFT JOIN GATHERING T3 ON T2.GATHERING_ID =T3.ID
					LEFT JOIN PAYMENT_CONCESSION T4	ON T3.ID=T4.GATHERING_ID
					GROUP BY T1.ID,T4.CONCESSION_TYPE) T
					GROUP BY T.ID
				)T2 ON T1.ID=T2.ID
			WHERE T1.Company_Id=1 and T1.Deleted='0'
			]]>
			<dynamic>
				<isNotNull prepend="and" property="CustomerName">
					<![CDATA[
					T1.CUSTOMER_NAME = #CustomerName#
					]]>
				</isNotNull>
				<isNotNull prepend="  " property="No">
					<isGreaterThan compareProperty="Zero" prepend="and" compareValue="0">
						<![CDATA[
						ISNULL(T2.Zero,0) $No$ #Zero#			
						]]>
					</isGreaterThan>
				</isNotNull>
				<isNotNull prepend="  " property="LinkManName">
					<isGreaterThan prepend="and" compareProperty="Concession" compareValue="0">
						<![CDATA[
						ISNULL(T2.Concession,0) $LinkManName$ #Concession#
						]]>
					</isGreaterThan>
				</isNotNull>
				<isNotNull prepend="  " property="LastTelNo">
					<isGreaterThan prepend="and" compareProperty="GiveAway" compareValue="0">
						<![CDATA[
						ISNULL(T2.GiveAway,0) $LastTelNo$ #GiveAway#
						]]>
					</isGreaterThan>
				</isNotNull>
				<isNotNull prepend="and" property="BalanceDateTimeString">
					<![CDATA[
					T1.UPDATE_DATE_TIME >= #BalanceDateTimeString#
					]]>		
				</isNotNull>
				<isNotNull prepend="and" property="InsertDateTimeString">
					<![CDATA[
					T1.UPDATE_DATE_TIME <= #InsertDateTimeString#
					]]>
				</isNotNull>
				<isNotEqual prepend="and" property="BranchShopId" compareValue="0">
					<![CDATA[
					T1.Branch_Shop_Id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
			<![CDATA[
			ORDER BY T1.ID
			]]>
		</select>
		<select id="SearchNewAndOldCusotmerConsumeCount" parameterClass="Order" resultMap="SearchNewAndOldCusotmerConsumeCount">
			<![CDATA[
			select sum(orderCount) orderCount,sum(paperCount) paperCount,sum(sum_Amount) sum_Amount,max(memo) memo from
			(select a.customer_id,count(*)  orderCount,sum(isnull(b.PAPER_CONSUME_COUNT,0)+isnull(b.CASH_CONSUME_COUNT,0)) paperCount,sum(sum_Amount) sum_Amount ,max(a.Memo) memo
			from orders a 
			inner join order_item b on a.id=b.orders_id
			where a.deleted='0' and a.company_Id=#CompanyId# and a.Status=#Status#
			]]>
			<dynamic>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					a.branch_Shop_id=#BranchShopId#			
					]]>
				</isNotEqual>
			</dynamic>
			<![CDATA[
			group by a.customer_id ) a
			where 1=1 
			]]>
			<dynamic>
				<isNotNull prepend="  " property="No">
					<isGreaterEqual prepend="and" compareProperty="SumAmount" compareValue="0">
						<![CDATA[
						a.sum_Amount $No$ #SumAmount#
						]]>
					</isGreaterEqual>
				</isNotNull>
				<isNotNull prepend="  " property="Name">
					<isGreaterEqual prepend="and" compareProperty="PaperCount" compareValue="0">
						<![CDATA[
						 a.papercount $Name$ #PaperCount#
						]]>
					</isGreaterEqual>
				</isNotNull>
			</dynamic>
			<![CDATA[
			group by orderCount
			]]>
		</select>
		<select id="ExceptionMemberCustomerConsume" parameterClass="Order" resultMap="ExceptionMemberCustomerConsume">
			<![CDATA[
			select a.member_card_id,max(a.Customer_Name) CustomerName,max(b.member_Card_No) memberCardNo,sum(isnull(sum_amount,0)) sumAmount,max(c.name) name,max(a.memo) memo from orders a 
			inner join member_card b on a.member_card_id=b.id
			inner join employee c on a.cash_user_id=c.id
			where a.company_id=#CompanyId# and a.deleted='0' and a.status=#Status#
			]]>
			<dynamic>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					a.Branch_shop_id=#BranchShopId# 
					]]>
				</isNotEqual>
				<isNotNull prepend="and" property="MemberCardNo">
					<![CDATA[
					b.Member_Card_No=#MemberCardNo#
					]]>
				</isNotNull>
				<isNotNull prepend="  " property="No">
					<isGreaterEqual prepend="and" compareProperty="SumAmount" compareValue="0">
						<![CDATA[
						a.sum_Amount $No$ #SumAmount#
						]]>
					</isGreaterEqual>
				</isNotNull>
				<isNotNull prepend="and" property="BalanceDateTimeString">
					<![CDATA[
						a.Balance_Date_Time >= #BalanceDateTimeString#
						]]>
				</isNotNull>
				<isNotNull prepend="and" property="InsertDateTimeString">
					<![CDATA[
						a.Balance_Date_Time <= #InsertDateTimeString#
						]]>
				</isNotNull>
				<![CDATA[
				group by a.member_card_id
				order by a.member_Card_id
				]]>
			</dynamic>
		</select>
		<select id="ExceptionConsumeCustomer" parameterClass="Order" resultMap="ExceptionConsumeCustomer">
			<![CDATA[
			select a.* from 
			(select a.customer_id,max(a.customer_name) customername,sum(isnull(a.sum_Amount,0)) sumAmount,max(b.name) name,max(a.memo) memo from orders a
			inner join  employee b on a.cash_user_id=b.id
			where a.deleted='0' and a.company_Id=#CompanyId# and status=#Status# 
			]]>
			<dynamic>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					a.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
				<isNotNull prepend="and" property="BalanceDateTimeString">
					<![CDATA[
					a.balance_date_Time>= #BalanceDateTimeString#
					]]>
				</isNotNull>
				<isNotNull prepend="and" property="InsertDateTimeString">
					<![CDATA[
					a.balance_Date_Time<= #InsertDateTimeString#
					]]>
				</isNotNull>
			</dynamic>
			<![CDATA[
			group by a.customer_id
			) a
			where 1=1
			]]>
			<dynamic>
				<isNotNull prepend="  " property="No">
					<isGreaterEqual prepend="and" compareProperty="SumAmount" compareValue="0">
						<![CDATA[
						 sumamount $No$ #SumAmount#
						]]>
					</isGreaterEqual>
				</isNotNull>
			</dynamic>
			<![CDATA[
			]]>
		</select>
		<select id="SelectOrderAllUserByOrderId" resultMap="SelectOrderAllUserByOrderId">
			<![CDATA[
			select a.id OrdersId,c.*,isnull(b.Amount,0)*isnull(b.Unit_price,0) Amount from orders a with(nolock)
			inner join order_item b with(nolock) on a.id=b.orders_id
			inner join order_item_employee c with(nolock) on b.id=c.order_item_id
			inner join employee_position d with(nolock) on c.employee_id=d.employee_id
			where a.deleted='0' and a.company_id=#CompanyId# 
				and a.Id=#Id# and d.position_id=#MemberCardId# and b.id=#Status1#
			]]>
			<dynamic>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					a.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
			
			<!--<dynamic>
				<isNotEqual prepend="and" compareProperty ="Id" compareValue="0">
					<![CDATA[
					a.id=#Id#
					]]>
				</isNotEqual>
				<isNotEqual prepend="and" compareProperty="MemberCardId" compareValue="0">
					<![CDATA[
					d.position_id=#MemberCardId#
					]]>
				</isNotEqual>
			</dynamic>-->
		</select>
		<select id="SelectOrderReceptionAndCashUserByOrderId" resultMap="SelectOrderReceptionAndCashUserByOrderIdResult">
			<![CDATA[
			select b.employee_id as new_order_user_id,c.employee_id as cash_user_id,sum_Amount from orders a with(nolock)
			inner join users b on a.new_order_user_id=b.id
			inner join users c on a.cash_user_id=c.id

			where a.deleted='0' and a.company_id=#CompanyId# and a.id=#Id# 
			]]>
			<dynamic>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					a.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
		</select>
		<insert id="InsertOrder" parameterClass="Order">
			INSERT INTO ORDERS
			(
			ID, CUSTOMER_ID, NEW_ORDER_USER_ID, CASH_USER_ID, MEMBER_CARD_ID, NO, CUSTOMER_TYPE, CUSTOMER_NAME, NAME, PROJECT_NAME, PAY_TYPE, PREPARE_MONEY, PREPARE_MONEY_AMOUNT, NEED_TICKET, DELIVERY_TYPE, DELIVERY_DATE_TIME, SUM_AMOUNT, MEMO, NOT_PAY_TICKET_AMOUNT, REAL_PAID_AMOUNT, PAID_AMOUNT, PAID_TICKET, STATUS, BALANCE_DATE_TIME, DELETED, INSERT_DATE_TIME, INSERT_USER, UPDATE_DATE_TIME, UPDATE_USER, VERSION, COMPANY_ID, BRANCH_SHOP_ID
			)
			VALUES
			(
			#Id # , #CustomerId# , #NewOrderUser.Id# , #CashUser.Id# , 
			<dynamic>
				<isNull prepend="" Property="MemberCardNo" >
					NULL
				</isNull>
				<isNotNull prepend="" Property="MemberCardNo"  >
					#MemberCardId#
				</isNotNull>
			</dynamic>
			,#No# , #CustomerType# , #CustomerName# , #Name# , #ProjectName# , #PayType# , #PrepareMoney# , #PrepareMoneyAmount# , #NeedTicket# , #DeliveryType# , #DeliveryDateTime# , #SumAmount# , #Memo# , #NotPayTicketAmount# , #RealPaidAmount# , #PaidAmount# , #PaidTicket# , #Status# , #BalanceDateTime# , #Deleted# , #InsertDateTime# , #InsertUser# , #UpdateDateTime# , #UpdateUser# , #Version# , #CompanyId# , #BranchShopId#
			)
		</insert>
		<update id="UpdateOrder" parameterClass="Order">
			<!--,NEW_ORDER_USER_ID = #NewOrderUser.Id#  ,CASH_USER_ID = #CashUser.Id# -->
			UPDATE ORDERS
			SET
			CUSTOMER_ID = #CustomerId#  ,MEMBER_CARD_ID =
			<dynamic>
				<isNull prepend="" Property="MemberCardNo" >
					NULL
				</isNull>
				<isNotNull prepend="" Property="MemberCardNo"  >
					#MemberCardId#
				</isNotNull>
			</dynamic>
			,NO = #No#  ,CUSTOMER_TYPE = #CustomerType#  ,CUSTOMER_NAME = #CustomerName#  ,NAME = #Name#  ,PROJECT_NAME = #ProjectName#  ,PAY_TYPE = #PayType#  ,PREPARE_MONEY = #PrepareMoney#  ,PREPARE_MONEY_AMOUNT = #PrepareMoneyAmount#  ,NEED_TICKET = #NeedTicket#  ,DELIVERY_TYPE = #DeliveryType#  ,DELIVERY_DATE_TIME = #DeliveryDateTime#  ,SUM_AMOUNT = #SumAmount#  ,MEMO = #Memo#  ,NOT_PAY_TICKET_AMOUNT = #NotPayTicketAmount#  ,REAL_PAID_AMOUNT = #RealPaidAmount#  ,PAID_AMOUNT = #PaidAmount#  ,PAID_TICKET = #PaidTicket#  ,STATUS = #Status#  ,BALANCE_DATE_TIME = #BalanceDateTime#  ,UPDATE_DATE_TIME = #UpdateDateTime#  ,UPDATE_USER = #UpdateUser#  ,VERSION = VERSION + 1
			WHERE ID = #Id#
		</update>
    
		<!--预收款处理-->
		<select id="SelectOrderInfoByOrderNo" parameterClass="Order" resultMap="selectResult_Prepay">
			<![CDATA[
		  SELECT ID, CUSTOMER_ID, NEW_ORDER_USER_ID, CASH_USER_ID, MEMBER_CARD_ID, NO, CUSTOMER_TYPE, CUSTOMER_NAME, NAME,
		  PROJECT_NAME, PAY_TYPE, PREPARE_MONEY, PREPARE_MONEY_AMOUNT, NEED_TICKET, DELIVERY_TYPE, DELIVERY_DATE_TIME,
		  SUM_AMOUNT, MEMO, NOT_PAY_TICKET_AMOUNT, REAL_PAID_AMOUNT, PAID_AMOUNT, PAID_TICKET, STATUS, BALANCE_DATE_TIME, DELETED,
		  INSERT_DATE_TIME, INSERT_USER, UPDATE_DATE_TIME, UPDATE_USER, VERSION, COMPANY_ID, BRANCH_SHOP_ID, HasPrePaidMoney,
		  NeedPrePay
		  FROM         ( SELECT     a.ID, a.CUSTOMER_ID, a.NEW_ORDER_USER_ID, a.CASH_USER_ID,
									a.MEMBER_CARD_ID, a.NO, a.CUSTOMER_TYPE, a.CUSTOMER_NAME, a.NAME,
									a.PROJECT_NAME, a.PAY_TYPE, a.PREPARE_MONEY, a.PREPARE_MONEY_AMOUNT,
									a.NEED_TICKET, a.DELIVERY_TYPE, a.DELIVERY_DATE_TIME, a.SUM_AMOUNT,
									a.MEMO, a.NOT_PAY_TICKET_AMOUNT, a.REAL_PAID_AMOUNT, a.PAID_AMOUNT,
									a.PAID_TICKET, a.STATUS, a.BALANCE_DATE_TIME, a.DELETED, a.INSERT_DATE_TIME,
									a.INSERT_USER, a.UPDATE_DATE_TIME, a.UPDATE_USER, a.VERSION,
									a.COMPANY_ID, a.BRANCH_SHOP_ID, ISNULL(b.PrePaidMoney, 0) AS HasPrePaidMoney,
									a.PREPARE_MONEY_AMOUNT - ISNULL(b.PrePaidMoney, 0) AS NeedPrePay
							  FROM
							  (
							  SELECT     dbo.GATHERING_ORDERS.ORDERS_ID, ISNULL(SUM(dbo.GATHERING.AMOUNT), 0) AS PrePaidMoney FROM dbo.GATHERING
							  INNEr join GATHERING_ORDERS on dbo.GATHERING_ORDERS.GATHERING_ID = dbo.GATHERING.ID
							  INNER JOIN dbo.ORDERS ON dbo.GATHERING_ORDERS.ORDERS_ID = dbo.ORDERS.ID
							  WHERE      (dbo.GATHERING_ORDERS.PAY_KIND = 1)
							  GROUP BY dbo.GATHERING_ORDERS.ORDERS_ID
							  ) AS b RIGHT OUTER JOIN
							  dbo.ORDERS AS a ON b.ORDERS_ID = a.ID

							  WHERE  (a.COMPANY_ID = #CompanyId#) and (a.Branch_Shop_Id=#BranchShopId#) and (a.deleted='0')
						) l
		  where l.deleted='0' and l.Company_Id=#CompanyId# and l.Status<>#Status# and l.Status<>#Status1#
		  ]]>
			<dynamic>
			<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
			  l.BRANCH_SHOP_ID =#BranchShopId#
			</isNotEqual>
			<isNotNull prepend="AND" property="Id">
			  l.ID=#Id# 
			</isNotNull>
		  </dynamic>
		</select>
		<select id ="SelectAllNeedPrePay" parameterClass ="Order" resultMap="selectResult_PrepayMap">
		  <![CDATA[
		  select
		  top(#EveryPageCount#) 
		  a.Id,No,a.Customer_Id,b.Name as CustomerName,
		  a.Insert_Date_Time,a.Balance_Date_Time,
		  a.Sum_Amount,a.Prepare_Money_Amount
		  from Orders as a
		  Inner Join Customer as b on a.Customer_Id=b.Id
		  where a.deleted='0' And a.Company_Id=#CompanyId#
		  And a.Status<>#Status# and a.Status<>#Status1#]]>     
		  <dynamic>
			<isNotNull prepend="AND" property="No">
			  a.No like #No#
			</isNotNull>
			<isNotNull prepend="And" property="BalanceDateTimeString">
			  a.Insert_Date_Time>=#BalanceDateTimeString#
			</isNotNull>
			<isNotNull prepend="And" property="InsertDateTimeString">
			  <![CDATA[a.Insert_Date_Time<=#InsertDateTimeString#]]>
			</isNotNull>
			<isNotNull prepend="And" property="BranchShopId">
			  a.Branch_Shop_Id=#BranchShopId#
			</isNotNull>
			<isNotNull prepend="And" property="Memo">
			  a.Prepare_Money_Amount>0
			</isNotNull>
		  </dynamic>
		  and a.Id not in
		  (
		  select
		  top(#EveryPageCount# * #CurrentPageIndex#) a.Id
		  from Orders as a
		  Inner Join Customer as b on a.Customer_Id=b.Id
		  where a.deleted='0' And a.Company_Id=#CompanyId#
		  <![CDATA[And a.Status<>#Status# and a.Status<>#Status1#]]>
			<dynamic>
			  <isNotNull prepend="AND" property="No">
				a.No like #No#
			  </isNotNull>
			  <isNotNull prepend="And" property="BalanceDateTimeString">
				a.Insert_Date_Time>=#BalanceDateTimeString#
			  </isNotNull>
			  <isNotNull prepend="And" property="InsertDateTimeString">
				<![CDATA[a.Insert_Date_Time<=#InsertDateTimeString#]]>
			  </isNotNull>
			  <isNotNull prepend="And" property="BranchShopId">
				a.Branch_Shop_Id=#BranchShopId#
			  </isNotNull>
			  <isNotNull prepend="And" property="Memo">
				a.Prepare_Money_Amount>0
			  </isNotNull>
			</dynamic>
		  order by a.id
		  )
		  order by a.id
    </select>
		<select id ="SelectAllNeedPrePayCount" parameterClass ="Order" resultClass ="long">
		  select count(*) from
		  (
		  select
		  distinct
		  a.Id,No,a.Customer_Id,b.Name as CustomerName,
		  a.Insert_Date_Time,a.Balance_Date_Time,
		  a.Sum_Amount,a.Prepare_Money_Amount
		  from Orders as a
		  Inner Join Customer as b on a.Customer_Id=b.Id
		  where a.deleted='0' And a.Company_Id=#CompanyId#
		  <![CDATA[And a.Status<>#Status# and a.Status<>#Status1#]]>
		  <dynamic>
			<isNotNull prepend="AND" property="No">
			  a.No like #No#
			</isNotNull>
			<isNotNull prepend="And" property="BalanceDateTimeString">
			  a.Insert_Date_Time>=#BalanceDateTimeString#
			</isNotNull>
			<isNotNull prepend="And" property="InsertDateTimeString">
			  <![CDATA[a.Insert_Date_Time<=#InsertDateTimeString#]]>
			</isNotNull>
			<isNotNull prepend="And" property="BranchShopId">
			  a.Branch_Shop_Id=#BranchShopId#
			</isNotNull>
			<isNotNull prepend="And" property="Memo">
			  a.Prepare_Money_Amount>0
			</isNotNull>
		   </dynamic>
		  )l
		</select>
    
		<select id="GetOrderPrepayAmountTotalAndSumAmountTotal" parameterClass="Order" resultMap="GetOrderPrepayAmountTotalAndSumAmountTotalMap">
		  select
		  Sum(isnull(a.Sum_Amount,0)) SumAmountTotal,sum(isnull(a.Prepare_Money_Amount,0)) PrepareMoneyAmountTotal
		  from Orders as a
		  where a.deleted='0' And a.Company_Id=#CompanyId#
		  <![CDATA[And a.Status<>#Status# and a.Status<>#Status1#]]>
		  <dynamic>
			<isNotNull prepend="AND" property="No">
			  a.No like #No#
			</isNotNull>
			<isNotNull prepend="And" property="BalanceDateTimeString">
			  a.Insert_Date_Time>=#BalanceDateTimeString#
			</isNotNull>
			<isNotNull prepend="And" property="InsertDateTimeString">
			  <![CDATA[a.Insert_Date_Time<=#InsertDateTimeString#]]>
			</isNotNull>
			<isNotNull prepend="And" property="BranchShopId">
			  a.Branch_Shop_Id=#BranchShopId#
			</isNotNull>
			<isNotNull prepend="And" property="Memo">
			  a.Prepare_Money_Amount>0
			</isNotNull>
		  </dynamic>
		</select>
		<select id="SelectByPk_PrePaid" parameterClass="long" resultMap="selectResult_HasPrepay">
			SELECT
			ID, CUSTOMER_ID, NEW_ORDER_USER_ID, CASH_USER_ID, MEMBER_CARD_ID, NO, CUSTOMER_TYPE, CUSTOMER_NAME, NAME, PROJECT_NAME, PAY_TYPE, PREPARE_MONEY, PREPARE_MONEY_AMOUNT, NEED_TICKET, DELIVERY_TYPE, DELIVERY_DATE_TIME, SUM_AMOUNT, MEMO, NOT_PAY_TICKET_AMOUNT, REAL_PAID_AMOUNT, PAID_AMOUNT, PAID_TICKET, STATUS, BALANCE_DATE_TIME, DELETED, INSERT_DATE_TIME, INSERT_USER, UPDATE_DATE_TIME, UPDATE_USER, VERSION, COMPANY_ID, BRANCH_SHOP_ID
			FROM ORDERS
			WHERE ID = #Id# AND DELETED = '0'
		</select>
    
		<!--应收款按照时间段合计(分页)-->  
		<select id="SelectAccountReceviableAccordingToTimeSectTotal" parameterClass="map" resultMap="selectAccountReceviableAcctordingToSectTotal">
			select
			top(#RowCount#) b.Name as Customer_Name,
			(Sum(isnull(Sum_Amount,0))-sum(isnull(PAID_AMOUNT,0))-sum(isnull(zero,0))-sum(isnull(concession,0))-sum(isnull(concession1,0))-sum(isnull(concession2,0))) as OweMomeyTotal,
			b.Memo,Customer_ID from (
			SELECT
			O.ID, O.NO, O.INSERT_DATE_TIME, o.Customer_Id,
			O.BALANCE_DATE_TIME, O.SUM_AMOUNT,
			isnull(goo.amount,0) PAID_AMOUNT,
			isnull(spc.ZERO,0) ZERO,
			isnull(spc.CONCESSION,0) Concession,
			isnull(spc.CONCESSION1,0)Concession1,
			isnull(spc.CONCESSION2,0)Concession2
			FROM (
			SELECT ID, NO, INSERT_DATE_TIME, Customer_Id,
			BALANCE_DATE_TIME, SUM_AMOUNT, PAID_AMOUNT, DELETED,
			COMPANY_ID, BRANCH_SHOP_ID FROM dbo.ORDERS
			WHERE Deleted='0'
			<dynamic>
				<isNotNull prepend="And" property="CustomerName">
					(CUSTOMER_ID in(Select Id from Customer where name like #CustomerName#))
				</isNotNull>
				<isNotNull prepend="And" property="BeginBalanceDate">
				  <![CDATA[Balance_Date_Time>=#BeginBalanceDate#]]>
				</isNotNull>
				<isNotNull prepend="And" property="EndBalanceDate">
			  <![CDATA[ Balance_Date_Time<=#EndBalanceDate#]]>
			</isNotNull>
			</dynamic>
			AND (STATUS =#Status#) and Company_Id=#CompanyId# and Branch_Shop_Id=#BranchShopId#
			and Customer_Id in (select Id from Customer where Pay_Type=#PayType#)
			) AS O
			left outer JOIN
			(SELECT  SUM(ISNULL(ZERO, 0)) AS ZERO, SUM(ISNULL(CONCESSION, 0)) AS CONCESSION,sum(ISNULL(CONCESSION1,0)) as CONCESSION1, sum(ISNULL(CONCESSION2,0)) as CONCESSION2,ORDERS_ID FROM
			(SELECT
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION WHERE (CONCESSION_TYPE = #Status1#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS ZERO,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_1 WHERE (CONCESSION_TYPE = #Status2#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_2 WHERE (CONCESSION_TYPE = #Status3#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION1,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_3 WHERE (CONCESSION_TYPE = #Status4#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION2,
			dbo.GATHERING_ORDERS.ORDERS_ID FROM  dbo.GATHERING_ORDERS INNER JOIN dbo.GATHERING ON dbo.GATHERING_ORDERS.GATHERING_ID = dbo.GATHERING.ID) AS SumPayCon
			GROUP BY ORDERS_ID) AS spc ON spc.ORDERS_ID = O.ID
			left outer  join
			(select go.orders_id,sum(isnull(g.amount,0)) amount from gathering g
			inner join gathering_orders go on g.id=go.gathering_id
			where g.deleted='0'
			and (go.pay_Kind=#PayTypeBalance# or go.pay_kind=#PayTypePreDiff# or go.pay_kind=#PayTypeOwe# or go.pay_kind=#PayTypeMemberCardDiff# or go.pay_kind=#PreDeposits# or go.pay_kind=#AccountPreDepositsDiff#)<!--付款类型为:1.预付款冲减2结算款3应收款4会员卡冲减-->
			group by go.orders_id) as goo on goo.orders_id=o.id
			) as a
			right join Customer as b on b.Id=a.Customer_Id
			where (a.sum_amount-a.PAID_AMOUNT-a.ZERO-a.CONCESSION-a.CONCESSION1-a.CONCESSION2)>0
			And a.Customer_ID not in(
			<!--分页处-->
			select top(#RowCount#*#PagerCount#) Customer_ID from (
			SELECT
			O.ID, O.NO, O.INSERT_DATE_TIME, o.Customer_Id,
			O.BALANCE_DATE_TIME, O.SUM_AMOUNT,
			isnull(goo.amount,0) PAID_AMOUNT,
			isnull(spc.ZERO,0) ZERO,
			isnull(spc.CONCESSION,0) Concession,
			isnull(spc.CONCESSION1,0)Concession1,
			isnull(spc.CONCESSION2,0)Concession2
			FROM (
			SELECT ID, NO, INSERT_DATE_TIME, Customer_Id,
			BALANCE_DATE_TIME, SUM_AMOUNT, PAID_AMOUNT, DELETED,
			COMPANY_ID, BRANCH_SHOP_ID FROM dbo.ORDERS
			WHERE Deleted='0'
			<dynamic>
				<isNotNull prepend="And" property="CustomerName">
				  (CUSTOMER_ID in(Select Id from Customer where name like #CustomerName#))
				</isNotNull>
				<isNotNull prepend="And" property="BeginBalanceDate">
				  <![CDATA[Balance_Date_Time>=#BeginBalanceDate#]]>
				</isNotNull>
				<isNotNull prepend="And" property="EndBalanceDate">
			  <![CDATA[Balance_Date_Time<=#EndBalanceDate#]]>
			</isNotNull>
		   </dynamic>
			AND (STATUS =#Status#) and Company_Id=#CompanyId# and Branch_Shop_Id=#BranchShopId#
			and Customer_Id in (select Id from Customer where Pay_Type=#PayType#)<!--and Pay_Type=#PayType#-->
			) AS O
			left outer JOIN
			(SELECT  SUM(ISNULL(ZERO, 0)) AS ZERO, SUM(ISNULL(CONCESSION, 0)) AS CONCESSION,sum(ISNULL(CONCESSION1,0)) as CONCESSION1,sum(ISNULL(CONCESSION2,0)) as CONCESSION2, ORDERS_ID FROM
			(SELECT
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION WHERE (CONCESSION_TYPE = #Status1#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS ZERO,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_1 WHERE (CONCESSION_TYPE = #Status2#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_2 WHERE (CONCESSION_TYPE = #Status3#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION1,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_3 WHERE (CONCESSION_TYPE = #Status4#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION2,
			dbo.GATHERING_ORDERS.ORDERS_ID FROM  dbo.GATHERING_ORDERS INNER JOIN dbo.GATHERING ON dbo.GATHERING_ORDERS.GATHERING_ID = dbo.GATHERING.ID) AS SumPayCon
			GROUP BY ORDERS_ID) AS spc ON spc.ORDERS_ID = O.ID
			left outer  join
			(select go.orders_id,sum(isnull(g.amount,0)) amount from gathering g
			inner join gathering_orders go on g.id=go.gathering_id
			where g.deleted='0'
			and (go.pay_Kind=#PayTypeBalance# or go.pay_kind=#PayTypePreDiff# or go.pay_kind=#PayTypeOwe# or go.pay_kind=#PayTypeMemberCardDiff# or go.pay_kind=#PreDeposits# or go.pay_kind=#AccountPreDepositsDiff#)<!--付款类型为:1.预付款冲减2结算款3应收款-->
			group by go.orders_id) as goo on goo.orders_id=o.id
			) as a
			right join Customer as b on b.Id=a.Customer_Id
			where (a.sum_amount-a.PAID_AMOUNT-a.ZERO-a.CONCESSION-a.CONCESSION1-a.CONCESSION2)>0
			Group by Customer_ID,b.Name,b.Memo
			order by Customer_ID
			)
			Group by Customer_ID,b.Name,b.Memo
			order by Customer_ID
		</select>
		<select id="GetAccountRecivableTotalCount" parameterClass="map" resultClass="long">
			select Count(*) from (
			select
			b.Name as Customer_Name,
			(Sum(isnull(Sum_Amount,0))-sum(isnull(PAID_AMOUNT,0))-sum(isnull(zero,0))-sum(isnull(concession,0))-sum(isnull(concession1,0))-sum(isnull(concession2,0))) as OweMomeyTotal,
			b.Memo,Customer_ID from (
			SELECT
			O.ID, O.NO, O.INSERT_DATE_TIME, o.Customer_Id,
			O.BALANCE_DATE_TIME, O.SUM_AMOUNT,
			isnull(goo.amount,0) PAID_AMOUNT,
			isnull(spc.ZERO,0) ZERO,
			isnull(spc.CONCESSION,0) Concession,
			isnull(spc.CONCESSION1,0)Concession1,
			isnull(spc.CONCESSION2,0)Concession2
			FROM (
			SELECT ID, NO, INSERT_DATE_TIME, Customer_Id,
			BALANCE_DATE_TIME, SUM_AMOUNT, PAID_AMOUNT, DELETED,
			COMPANY_ID, BRANCH_SHOP_ID FROM dbo.ORDERS
			WHERE Deleted='0'
			<dynamic>
				<isNotNull prepend="And" property="CustomerName">
				  (CUSTOMER_ID in(Select Id from Customer where name like #CustomerName#))
				</isNotNull>
				<isNotNull prepend="And" property="BeginBalanceDate">
				  <![CDATA[Balance_Date_Time>=#BeginBalanceDate#]]>
				</isNotNull>
				<isNotNull prepend="And" property="EndBalanceDate">
			  <![CDATA[Balance_Date_Time<=#EndBalanceDate#]]>
			</isNotNull>
		   </dynamic>
			AND (STATUS =#Status#) and Company_Id=#CompanyId# and Branch_Shop_Id=#BranchShopId#
			and Customer_Id in (select Id from Customer where Pay_Type=#PayType#)
			) AS O
			left outer JOIN
			(SELECT  SUM(ISNULL(ZERO, 0)) AS ZERO, SUM(ISNULL(CONCESSION, 0)) AS CONCESSION,sum(ISNULL(CONCESSION1,0)) as CONCESSION1,sum(ISNULL(CONCESSION2,0)) as CONCESSION2, ORDERS_ID FROM
			(SELECT
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION WHERE (CONCESSION_TYPE = #Status1#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS ZERO,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_1 WHERE (CONCESSION_TYPE = #Status2#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_2 WHERE (CONCESSION_TYPE = #Status3#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION1,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_3 WHERE (CONCESSION_TYPE = #Status4#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION2,
			dbo.GATHERING_ORDERS.ORDERS_ID FROM  dbo.GATHERING_ORDERS INNER JOIN dbo.GATHERING ON dbo.GATHERING_ORDERS.GATHERING_ID = dbo.GATHERING.ID) AS SumPayCon
			GROUP BY ORDERS_ID) AS spc ON spc.ORDERS_ID = O.ID
			left outer  join
			(select go.orders_id,sum(isnull(g.amount,0)) amount from gathering g
			inner join gathering_orders go on g.id=go.gathering_id
			where g.deleted='0'
			and (go.pay_Kind=#PayTypeBalance# or go.pay_kind=#PayTypePreDiff# or go.pay_kind=#PayTypeOwe# or go.pay_kind=#PayTypeMemberCardDiff# or go.pay_kind=#PreDeposits# or go.pay_kind=#AccountPreDepositsDiff#)<!--付款类型为:1.预付款冲减2结算款3应收款-->
		  group by go.orders_id) as goo on goo.orders_id=o.id
		  ) as a
		  right join Customer as b on b.Id=a.Customer_Id
		  where (a.sum_amount-a.PAID_AMOUNT-a.ZERO-a.CONCESSION-a.CONCESSION1-a.concession2)>0
		  Group by Customer_ID,b.Name,b.Memo
		  ) as l
		  where l.OweMomeyTotal>0
		</select>
		<select id="SelectGetAccountRecivableTotal" parameterClass="map" resultMap="selectAccountReceviableAcctordingToSectTotal">
			select * from (
				select b.Name as Customer_Name,
				(Sum(isnull(Sum_Amount,0))-sum(isnull(PAID_AMOUNT,0))-sum(isnull(zero,0))-sum(isnull(concession,0))-sum(isnull(concession1,0))-sum(isnull(concession2,0))) as OweMomeyTotal,
				b.Memo,Customer_ID from (
				SELECT
				O.ID, O.NO, O.INSERT_DATE_TIME, o.Customer_Id,
				O.BALANCE_DATE_TIME, O.SUM_AMOUNT,
				isnull(goo.amount,0) PAID_AMOUNT,
				isnull(spc.ZERO,0) ZERO,
				isnull(spc.CONCESSION,0) Concession,
				isnull(spc.CONCESSION1,0)Concession1,
				isnull(spc.CONCESSION2,0)Concession2
				FROM (
				SELECT ID, NO, INSERT_DATE_TIME, Customer_Id,
				BALANCE_DATE_TIME, SUM_AMOUNT, PAID_AMOUNT, DELETED,
				COMPANY_ID, BRANCH_SHOP_ID FROM dbo.ORDERS
				WHERE Deleted='0'
				<dynamic>
					<isNotNull prepend="And" property="CustomerName">
					  (CUSTOMER_ID in(Select Id from Customer where name like #CustomerName#))
					</isNotNull>
					<isNotNull prepend="And" property="BeginBalanceDate">
					  <![CDATA[Balance_Date_Time>=#BeginBalanceDate#]]>
					</isNotNull>
					<isNotNull prepend="And" property="EndBalanceDate">
					  <![CDATA[Balance_Date_Time<=#EndBalanceDate#]]>
					</isNotNull>
				</dynamic>
				AND (STATUS =#Status#) and Company_Id=#CompanyId# and Branch_Shop_Id=#BranchShopId#
				and Customer_Id in (select Id from Customer where Pay_Type=#PayType#)<!--and Pay_Type=#PayType#-->
			) AS O
			left outer JOIN
			(SELECT  SUM(ISNULL(ZERO, 0)) AS ZERO, SUM(ISNULL(CONCESSION, 0)) AS CONCESSION,sum(ISNULL(CONCESSION1,0)) as CONCESSION1,sum(ISNULL(CONCESSION2,0)) as CONCESSION2, ORDERS_ID FROM
			(SELECT
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION WHERE (CONCESSION_TYPE = #Status1#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS ZERO,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_1 WHERE (CONCESSION_TYPE = #Status2#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_2 WHERE (CONCESSION_TYPE = #Status3#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION1,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_3 WHERE (CONCESSION_TYPE = #Status4#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION2,
			dbo.GATHERING_ORDERS.ORDERS_ID FROM  dbo.GATHERING_ORDERS INNER JOIN dbo.GATHERING ON dbo.GATHERING_ORDERS.GATHERING_ID = dbo.GATHERING.ID) AS SumPayCon
			GROUP BY ORDERS_ID) AS spc ON spc.ORDERS_ID = O.ID
			left outer  join
			(select go.orders_id,sum(isnull(g.amount,0)) amount from gathering g
			inner join gathering_orders go on g.id=go.gathering_id
			where g.deleted='0'
			and (go.pay_Kind=#PayTypeBalance# or go.pay_kind=#PayTypePreDiff# or go.pay_kind=#PayTypeOwe# or go.pay_kind=#PayTypeMemberCardDiff# or go.pay_kind=#PreDeposits# or go.pay_kind=#AccountPreDepositsDiff#)<!--付款类型为:1.预付款冲减2结算款3应收款-->
				group by go.orders_id) as goo on goo.orders_id=o.id
		  ) as a
		  right join Customer as b on b.Id=a.Customer_Id
		  where (a.sum_amount-a.PAID_AMOUNT-a.ZERO-a.CONCESSION-a.CONCESSION1-a.Concession2)>0
		  Group by Customer_ID,b.Name,b.Memo
		  ) kk where kk.OweMomeyTotal>0
		</select>   
		<!--日报-->
		<select id="SelectDailyPaper" parameterClass="map" resultMap="DailyPaper">
			select
			top (#RowCount#) e.Id,
			Sum(isnull(g.amount,0)) as PaidAmount,isnull(e.Sum_amount,0)-Sum(isnull(g.amount,0))-Sum(isnull(g.ConcessionAmount,0)) as OweMomeyTotal,
			e.[No],max(isnull(e.PAID_TICKET_AMOUNT,0))as NotPayTicketAmount,
			e.insert_Date_Time,e.Balance_Date_Time
			from Orders as e
			left join
			(
			select bb.orders_Id,bb.amount,cc.ConcessionAmount from (
			select orders_Id,Sum(isnull(b.Amount,0)) as amount from Gathering_Orders as a
			left join Gathering as b on a.Gathering_Id=b.Id
			where b.deleted='0'
			and (a.Pay_Kind=#PayTypeBalance# or a.pay_Kind=#PayTypePreDiff# or a.Pay_Kind=#PayTypeMemberCardDiff# or a.pay_kind=#PreDeposits#)
			Group by  Orders_Id
			) bb
			left join(
			select aa.Orders_Id,aa.ConcessionAmount from (
			select a.Orders_Id,sum(isnull(b.Concession_Amount,0)) as ConcessionAmount from Gathering_Orders as a
			left join PayMent_ConCession as b on b.Gathering_Id=a.gathering_Id
			where b.deleted='0'
			and (a.Pay_Kind=#PayTypeBalance# or a.pay_Kind=#PayTypePreDiff# or a.Pay_Kind=#PayTypeMemberCardDiff# or a.pay_kind=#PreDeposits#)
			Group by a.Orders_Id
			) aa
			)cc on cc.Orders_Id=bb.Orders_ID
			)as g on e.Id=g.orders_ID
			where e.DELETED = '0' and e.Company_Id=#CompanyId# and e.Status=#Status#
			<dynamic>
			<isNotNull prepend="And" property="BeginHandOverDateTime">
			  e.Balance_Date_Time>=#BeginHandOverDateTime#
			</isNotNull>
			<isNotNull prepend="And" property="EndHandOverDateTime">
			  <![CDATA[e.Balance_Date_Time<=#EndHandOverDateTime#]]>
			</isNotNull>
			<isNotNull prepend="And" property="BranchShopId">
			  e.branch_shop_id=#BranchShopId#
			</isNotNull>
			<isNotNull prepend="And" property="InsertDateTimeString">
			  e.Balance_Date_Time>=#InsertDateTimeString#
			</isNotNull>
			<isNotNull prepend="And" property="BalanceDateTimeString">
			  <![CDATA[ e.Balance_Date_Time<=#BalanceDateTimeString#]]>
			</isNotNull>
		  </dynamic>
			And e.id not in(
			select top(#RowCount#*#PageCount#) e.Id
			from Orders as e
			left join
			(
				<!--优化前的版本-->
				<!--select bb.orders_Id,bb.amount,cc.ConcessionAmount from (
					select orders_Id,Sum(isnull(b.Amount,0)) as amount from Gathering_Orders as a
					left join Gathering as b on a.Gathering_Id=b.Id
					where b.deleted='0'
					and (a.Pay_Kind=#PayTypeBalance# or a.pay_Kind=#PayTypePreDiff# or a.Pay_Kind=#PayTypeMemberCardDiff#)
					Group by  Orders_Id
				) bb
				left join(
					select aa.Orders_Id,aa.ConcessionAmount from (
					select a.Orders_Id,sum(isnull(b.Concession_Amount,0)) as ConcessionAmount from Gathering_Orders as a
					left join PayMent_ConCession as b on b.Gathering_Id=a.gathering_Id
					where b.deleted='0'
					and (a.Pay_Kind=#PayTypeBalance# or a.pay_Kind=#PayTypePreDiff# or a.Pay_Kind=#PayTypeMemberCardDiff#)
					Group by a.Orders_Id
					) aa
				)cc on cc.Orders_Id=bb.Orders_ID-->
			  <!--优化后的版本 修正人:张晓林 修正时间:2009年9月12日17:42:43-->
			select bb.orders_Id from (
			select orders_Id from Gathering_Orders as a
			left join Gathering as b on a.Gathering_Id=b.Id
			where b.deleted='0'
			and (a.Pay_Kind=#PayTypeBalance# or a.pay_Kind=#PayTypePreDiff# or a.Pay_Kind=#PayTypeMemberCardDiff# or a.pay_kind=#PreDeposits#)
			Group by  Orders_Id
			) bb
			left join(
			select aa.Orders_Id from (
			select a.Orders_Id from Gathering_Orders as a
			left join PayMent_ConCession as b on b.Gathering_Id=a.gathering_Id
			where b.deleted='0'
			and (a.Pay_Kind=#PayTypeBalance# or a.pay_Kind=#PayTypePreDiff# or a.Pay_Kind=#PayTypeMemberCardDiff# or a.pay_kind=#PreDeposits#)
			Group by a.Orders_Id
			) aa
			)cc on cc.Orders_Id=bb.Orders_ID
			)as g on e.Id=g.orders_ID
			where e.DELETED = '0' and e.Company_Id=#CompanyId# and e.Status=#Status#
			<dynamic>
			<isNotNull prepend="And" property="BeginHandOverDateTime">
			  e.Balance_Date_Time>=#BeginHandOverDateTime#
			</isNotNull>
			<isNotNull prepend="And" property="EndHandOverDateTime">
			  <![CDATA[e.Balance_Date_Time<=#EndHandOverDateTime#]]>
			</isNotNull>
			  <isNotNull prepend="And" property="BranchShopId">
				e.branch_shop_id=#BranchShopId#
			  </isNotNull>
			<isNotNull prepend="And" property="InsertDateTimeString">
			  e.Balance_Date_Time>=#InsertDateTimeString#
			</isNotNull>
			<isNotNull prepend="And" property="BalanceDateTimeString">
			  <![CDATA[ e.Balance_Date_Time<=#BalanceDateTimeString#]]>
			</isNotNull>
			</dynamic>
		  order by e.Id
		  )
		  group by g.Orders_ID,e.ID,e.No,e.insert_Date_Time,e.Balance_Date_Time,Paid_amount,e.Sum_amount
		 order by e.Id
		</select>
		<select id="SelectDailyPaperRowTotal" parameterClass="map" resultClass="long">	 
		  <!--优化前的版本 修正人:张晓林 修正时间:2009年9月12日10:30:59-->
		  <!--select Count(*) from (
		  select
		  e.Id,Sum(isnull(g.amount,0)) as PaidAmount,
		  (sum(isnull(e.Sum_amount,0))-Sum(isnull(g.amount,0))-Sum(isnull(g.ConcessionAmount,0))) as OweMomeyTotal,
		  e.[No],max(isnull(e.PAID_TICKET_AMOUNT,0))as NotPayTicketAmount,
		  e.insert_Date_Time,e.Balance_Date_Time
		  from Orders as e
		  left join
		  (
			  select bb.orders_Id,bb.amount,cc.ConcessionAmount from (
			  select orders_Id,Sum(isnull(b.Amount,0)) as amount from Gathering_Orders as a
			  left join Gathering as b on a.Gathering_Id=b.Id
			  where b.deleted='0'
			  and (a.Pay_Kind=#PayTypeBalance#)
			  Group by  Orders_Id
			  ) bb
			  left join (
				select aa.Orders_Id,aa.ConcessionAmount from (
				select a.Orders_Id,sum(isnull(b.Concession_Amount,0)) as ConcessionAmount from Gathering_Orders as a
				left join PayMent_ConCession as b on b.Gathering_Id=a.gathering_Id
				where b.deleted='0'
				and (a.Pay_Kind=#PayTypeBalance#)
				Group by a.Orders_Id
				) aa
			  )cc on cc.Orders_Id=bb.Orders_ID
		  )as g on e.Id=g.orders_ID
		  where e.DELETED = '0' and e.Company_Id=#CompanyId# and e.Status=#Status#-->
			<!--优化后 修正人:张晓林 修正时间:2009年9月12日10:30:59-->
			select
			count(e.Id)
			from Orders as e
			left join
			(
			select bb.orders_Id from (
			select orders_Id from Gathering_Orders as a
			left join Gathering as b on a.Gathering_Id=b.Id
			where b.deleted='0'
			and (a.Pay_Kind=#PayTypeBalance#)
			Group by  Orders_Id
			) bb
			left join (
			select aa.Orders_Id from (
			select a.Orders_Id from Gathering_Orders as a
			left join PayMent_ConCession as b on b.Gathering_Id=a.gathering_Id
			where b.deleted='0'
			and (a.Pay_Kind=#PayTypeBalance#)
			Group by a.Orders_Id
			) aa
			)cc on cc.Orders_Id=bb.Orders_ID
			)as g on e.Id=g.orders_ID
			where e.DELETED = '0' and e.Company_Id=#CompanyId# and e.Status=#Status#
			<dynamic>
			<isNotNull prepend="And" property="BeginHandOverDateTime">
			  e.Balance_Date_Time>=#BeginHandOverDateTime#
			</isNotNull>
			<isNotNull prepend="And" property="EndHandOverDateTime">
			  <![CDATA[e.Balance_Date_Time<=#EndHandOverDateTime#]]>
			</isNotNull>
			<isNotNull prepend="And" property="BranchShopId">
			  e.branch_shop_id=#BranchShopId#
			</isNotNull>
			<isNotNull prepend="And" property="InsertDateTimeString">
			  e.Balance_Date_Time>=#InsertDateTimeString#
			</isNotNull>
			<isNotNull prepend="And" property="BalanceDateTimeString">
			  <![CDATA[ e.Balance_Date_Time<=#BalanceDateTimeString#]]>
			</isNotNull>
		  </dynamic>
		</select>
		<select id="SelectDailyPaperPrint" parameterClass="map" resultMap="DailyPaper">
			select
			e.Id,Sum(isnull(g.amount,0)) as PaidAmount,
			(sum(isnull(e.Sum_amount,0))-Sum(isnull(g.amount,0))-Sum(isnull(g.ConcessionAmount,0))) as OweMomeyTotal,
			e.[No],max(isnull(e.PAID_TICKET_AMOUNT,0))as NotPayTicketAmount,
			e.insert_Date_Time,e.Balance_Date_Time
			from Orders as e
			left join
			(
			select bb.orders_Id,bb.amount,cc.ConcessionAmount from (
			select orders_Id,Sum(isnull(b.Amount,0)) as amount from Gathering_Orders as a
			left join Gathering as b on a.Gathering_Id=b.Id
			where b.deleted='0'
			and (a.Pay_Kind=#PayTypeBalance# or a.pay_Kind=#PayTypePreDiff# or a.Pay_Kind=#PayTypeMemberCardDiff# or a.pay_kind=#PreDeposits#) <!--付款类型为结算款+会员卡冲减+预付款冲减-->
			Group by  Orders_Id
			) bb
			left join(
			select aa.Orders_Id,aa.ConcessionAmount from (
			select a.Orders_Id,sum(isnull(b.Concession_Amount,0)) as ConcessionAmount from Gathering_Orders as a
			left join PayMent_ConCession as b on b.Gathering_Id=a.gathering_Id
			where b.deleted='0'
			and (a.Pay_Kind=#PayTypeBalance# or a.pay_Kind=#PayTypePreDiff# or a.Pay_Kind=#PayTypeMemberCardDiff# or a.pay_kind=#PreDeposits#) <!--付款类型为结算款和会员卡冲减+预付款冲减-->
				Group by a.Orders_Id
				) aa
			  )cc on cc.Orders_Id=bb.Orders_ID
		  )as g on e.Id=g.orders_ID
		  where DELETED = '0' and e.Company_Id=#CompanyId# And e.Status=#Status#
		  <dynamic>
			<isNotNull prepend="And" property="BeginHandOverDateTime">
			  e.Balance_Date_Time>=#BeginHandOverDateTime#
			</isNotNull>
			<isNotNull prepend="And" property="EndHandOverDateTime">
			  <![CDATA[e.Balance_Date_Time<=#EndHandOverDateTime#]]>
			</isNotNull>
			<isNotNull prepend="And" property="BranchShopId">
			  e.branch_shop_id=#BranchShopId#
			</isNotNull>
			<isNotNull prepend="And" property="InsertDateTimeString">
			  e.Balance_Date_Time>=#InsertDateTimeString#
			</isNotNull>
			<isNotNull prepend="And" property="BalanceDateTimeString">
			  <![CDATA[ e.Balance_Date_Time<=#BalanceDateTimeString#]]>
			</isNotNull>
		  </dynamic>
		  group by g.Orders_ID,e.ID,e.No,e.insert_Date_Time,e.Balance_Date_Time,Paid_Amount
		  order by e.id
		</select>

		<!--应收款查询-->
		<select id="GetaAllCustomerArrearage" parameterClass="Order" resultMap="SelectCustomerArrearage">
			select * from (
			select b.Name as Customer_Name,
			(Sum(isnull(Sum_Amount,0))-sum(isnull(PAID_AMOUNT,0))-sum(isnull(zero,0))-sum(isnull(concession,0))-sum(isnull(concession1,0))-sum(isnull(concession2,0))) as OweMomeyTotal,
			b.Memo,Customer_ID from (
			SELECT
			O.ID, O.NO, O.INSERT_DATE_TIME, o.Customer_Id,
			O.BALANCE_DATE_TIME, O.SUM_AMOUNT,
			isnull(goo.amount,0) PAID_AMOUNT,
			isnull(spc.ZERO,0) ZERO,
			isnull(spc.CONCESSION,0) Concession,
			isnull(spc.CONCESSION1,0)Concession1,
			isnull(spc.CONCESSION2,0)Concession2
			FROM (
			SELECT ID, NO, INSERT_DATE_TIME, Customer_Id,
			BALANCE_DATE_TIME, SUM_AMOUNT, PAID_AMOUNT, DELETED,
			COMPANY_ID, BRANCH_SHOP_ID FROM dbo.ORDERS
			WHERE Deleted='0'
			<dynamic>
				<isNotNull prepend="And" property="CustomerName">
				  (CUSTOMER_ID in(Select Id from Customer where name like #CustomerName# and deleted='0'))
				</isNotNull>
				<isNotNull prepend="And" property="BalanceDateTimeString">
				  <![CDATA[Balance_Date_Time>=#BalanceDateTimeString#]]>
				</isNotNull>
				<isNotNull prepend="And" property="InsertDateTimeString">
				  <![CDATA[Balance_Date_Time<=#InsertDateTimeString#]]>
				</isNotNull>
		  </dynamic>
		  AND (STATUS =#Status#) and Company_Id=#CompanyId# and Branch_Shop_Id=#BranchShopId#
		  and datediff(day,Balance_Date_time,getdate()) $Operator2$  #Days#
		  and Customer_Id in (select Id from Customer where Pay_Type=#PayType#)<!--and Pay_Type=#PayType#-->
			) AS O
			left outer JOIN
			(SELECT  SUM(ISNULL(ZERO, 0)) AS ZERO, SUM(ISNULL(CONCESSION, 0)) AS CONCESSION,sum(ISNULL(CONCESSION1,0)) as CONCESSION1,sum(ISNULL(CONCESSION2,0)) as CONCESSION2, ORDERS_ID FROM
			(SELECT
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION WHERE (CONCESSION_TYPE = #Status1#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS ZERO,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_1 WHERE (CONCESSION_TYPE = #Status2#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_2 WHERE (CONCESSION_TYPE = #Status3#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION1,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_3 WHERE (CONCESSION_TYPE = #Status4#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION2,
			dbo.GATHERING_ORDERS.ORDERS_ID FROM  dbo.GATHERING_ORDERS INNER JOIN dbo.GATHERING ON dbo.GATHERING_ORDERS.GATHERING_ID = dbo.GATHERING.ID) AS SumPayCon
			GROUP BY ORDERS_ID) AS spc ON spc.ORDERS_ID = O.ID
			left outer  join
			(select go.orders_id,sum(isnull(g.amount,0)) amount from gathering g
			inner join gathering_orders go on g.id=go.gathering_id
			where g.deleted='0'
			and (go.pay_Kind=#LastTelNo# or go.pay_Kind=#LinkManName# or go.pay_kind=#Memo# or go.pay_kind=#OrderWorking# or go.pay_kind=#Address# or go.pay_kind=#CashName#)<!--付款类型为:1.预付款冲减;2.结算款;3.应收款-->
			group by go.orders_id) as goo on goo.orders_id=o.id
			) as a
			right join Customer as b on b.Id=a.Customer_Id
			where (a.sum_amount-a.PAID_AMOUNT-a.ZERO-a.CONCESSION-a.CONCESSION1-a.CONCESSION2)>0
			Group by Customer_ID,b.Name,b.Memo
			) kk where OweMomeyTotal $Operator1$ #Sumamount#
		</select>   
		<select id="SelectCustomerArrearage" parameterClass="Order" resultMap="SelectCustomerArrearage">
			select top(#EveryPageCount#) * from (
			select b.Name as Customer_Name,
			(Sum(isnull(Sum_Amount,0))-sum(isnull(PAID_AMOUNT,0))-sum(isnull(zero,0))-sum(isnull(concession,0))-sum(isnull(concession1,0))-sum(isnull(concession2,0))) as OweMomeyTotal,
			b.Memo,Customer_ID from (
			SELECT
			O.ID, O.NO, O.INSERT_DATE_TIME, o.Customer_Id,
			O.BALANCE_DATE_TIME, O.SUM_AMOUNT,
			isnull(goo.amount,0) PAID_AMOUNT,
			isnull(spc.ZERO,0) ZERO,
			isnull(spc.CONCESSION,0) Concession,
			isnull(spc.CONCESSION1,0)Concession1,
			isnull(spc.CONCESSION2,0)Concession2
			FROM (
			SELECT ID, NO, INSERT_DATE_TIME, Customer_Id,
			BALANCE_DATE_TIME, SUM_AMOUNT, PAID_AMOUNT, DELETED,
			COMPANY_ID, BRANCH_SHOP_ID FROM dbo.ORDERS
			WHERE Deleted='0'
			<dynamic>
				<isNotNull prepend="And" property="CustomerName">
				  (CUSTOMER_ID in(Select Id from Customer where name like #CustomerName# and deleted='0'))
				</isNotNull>
				<isNotNull prepend="And" property="BalanceDateTimeString">
				  <![CDATA[Balance_Date_Time>=#BalanceDateTimeString#]]>
				</isNotNull>
				<isNotNull prepend="And" property="InsertDateTimeString">
			  <![CDATA[Balance_Date_Time<=#InsertDateTimeString#]]>
			</isNotNull>
		  </dynamic>
		  AND (STATUS =#Status#) and Company_Id=#CompanyId# and Branch_Shop_Id=#BranchShopId#
		  and datediff(day,Balance_Date_time,getdate()) $Operator2$  #Days#
		  and Customer_Id in (select Id from Customer where Pay_Type=#PayType#)<!--and Pay_Type=#PayType#-->
			) AS O
			left outer JOIN
			(SELECT  SUM(ISNULL(ZERO, 0)) AS ZERO, SUM(ISNULL(CONCESSION, 0)) AS CONCESSION,sum(ISNULL(CONCESSION1,0)) as CONCESSION1,sum(ISNULL(CONCESSION2,0)) as CONCESSION2, ORDERS_ID FROM
			(SELECT
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION WHERE (CONCESSION_TYPE = #Status1#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS ZERO,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_1 WHERE (CONCESSION_TYPE = #Status2#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_2 WHERE (CONCESSION_TYPE = #Status3#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION1,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_3 WHERE (CONCESSION_TYPE = #Status4#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION2,
			dbo.GATHERING_ORDERS.ORDERS_ID FROM  dbo.GATHERING_ORDERS INNER JOIN dbo.GATHERING ON dbo.GATHERING_ORDERS.GATHERING_ID = dbo.GATHERING.ID) AS SumPayCon
			GROUP BY ORDERS_ID) AS spc ON spc.ORDERS_ID = O.ID
			left outer  join
			(select go.orders_id,sum(isnull(g.amount,0)) amount from gathering g
			inner join gathering_orders go on g.id=go.gathering_id
			where g.deleted='0'
			and (go.pay_Kind=#LastTelNo# or go.pay_Kind=#LinkManName# or go.pay_kind=#Memo# or go.pay_kind=#OrderWorking# or go.pay_kind=#Address# or go.pay_kind=#CashName#)<!--付款类型为:1.预付款冲减;2.结算款;3.应收款-->
			group by go.orders_id) as goo on goo.orders_id=o.id
			) as a
			right join Customer as b on b.Id=a.Customer_Id
			where (a.sum_amount-a.PAID_AMOUNT-a.ZERO-a.CONCESSION-a.CONCESSION1-a.CONCESSION2)>0
			Group by Customer_ID,b.Name,b.Memo
			)h where OweMomeyTotal $Operator1$ #Sumamount#
			And Customer_ID not in(
			<!--分页处-->
			select top(#EveryPageCount#*#CurrentPageIndex#) Customer_ID from(
			select b.Name as Customer_Name,
			(Sum(isnull(Sum_Amount,0))-sum(isnull(PAID_AMOUNT,0))-sum(isnull(zero,0))-sum(isnull(concession,0))-sum(isnull(concession1,0))-sum(isnull(concession2,0))) as OweMomeyTotal,
			b.Memo,Customer_ID from (
			SELECT
			O.ID, O.NO, O.INSERT_DATE_TIME, o.Customer_Id,
			O.BALANCE_DATE_TIME, O.SUM_AMOUNT,
			isnull(goo.amount,0) PAID_AMOUNT,
			isnull(spc.ZERO,0) ZERO,
			isnull(spc.CONCESSION,0) Concession,
			isnull(spc.CONCESSION1,0)Concession1,
			isnull(spc.CONCESSION2,0)Concession2
			FROM (
			SELECT ID, NO, INSERT_DATE_TIME, Customer_Id,
			BALANCE_DATE_TIME, SUM_AMOUNT, PAID_AMOUNT, DELETED,
			COMPANY_ID, BRANCH_SHOP_ID FROM dbo.ORDERS
			WHERE Deleted='0'
			<dynamic>
				<isNotNull prepend="And" property="CustomerName">
				  (CUSTOMER_ID in(Select Id from Customer where name like #CustomerName# and deleted='0'))
				</isNotNull>
				<isNotNull prepend="And" property="BalanceDateTimeString">
				<![CDATA[Balance_Date_Time>=#BalanceDateTimeString#]]>
			  </isNotNull>
				<isNotNull prepend="And" property="InsertDateTimeString">
				<![CDATA[Balance_Date_Time<=#InsertDateTimeString#]]>
			  </isNotNull>
			</dynamic>
		  AND (STATUS =#Status#) and Company_Id=#CompanyId# and Branch_Shop_Id=#BranchShopId#
		  and datediff(day,Balance_Date_time,getdate()) $Operator2$  #Days#
		  and Customer_Id in (select Id from Customer where Pay_Type=#PayType#)<!--and Pay_Type=#PayType#-->
			) AS O
			left outer JOIN
			(SELECT  SUM(ISNULL(ZERO, 0)) AS ZERO, SUM(ISNULL(CONCESSION, 0)) AS CONCESSION,sum(ISNULL(CONCESSION1,0)) as CONCESSION1,sum(ISNULL(CONCESSION2,0)) as CONCESSION2, ORDERS_ID FROM
			(SELECT
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION WHERE (CONCESSION_TYPE = #Status1#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS ZERO,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_1 WHERE (CONCESSION_TYPE = #Status2#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_2 WHERE (CONCESSION_TYPE = #Status3#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION1,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_3 WHERE (CONCESSION_TYPE = #Status4#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION2,
			dbo.GATHERING_ORDERS.ORDERS_ID FROM  dbo.GATHERING_ORDERS INNER JOIN dbo.GATHERING ON dbo.GATHERING_ORDERS.GATHERING_ID = dbo.GATHERING.ID) AS SumPayCon
			GROUP BY ORDERS_ID) AS spc ON spc.ORDERS_ID = O.ID
			left outer  join
			(select go.orders_id,sum(isnull(g.amount,0)) amount from gathering g
			inner join gathering_orders go on g.id=go.gathering_id
			where g.deleted='0'
			and (go.pay_Kind=#LastTelNo# or go.pay_Kind=#LinkManName# or go.pay_kind=#Memo# or go.pay_kind=#OrderWorking# or go.pay_kind=#Address# or go.pay_kind=#CashName#)<!--付款类型为:1.预付款冲减;2.结算款;3.应收款-->
			group by go.orders_id) as goo on goo.orders_id=o.id
			) as a
			right join Customer as b on b.Id=a.Customer_Id
			where (a.sum_amount-a.PAID_AMOUNT-a.ZERO-a.CONCESSION-a.CONCESSION1-a.CONCESSION2)>0
			Group by Customer_ID,b.Name,b.Memo
			)hh where OweMomeyTotal $Operator1$ #Sumamount#
			order by Customer_ID
			)
			order by Customer_ID
		</select>
		<select id="SelectCustomerArrearagePage" resultClass="long">
			select count(*) from(
			select b.Name as Customer_Name,
			(Sum(isnull(Sum_Amount,0))-sum(isnull(PAID_AMOUNT,0))-sum(isnull(zero,0))-sum(isnull(concession,0))-sum(isnull(concession1,0))-sum(isnull(concession2,0))) as OweMomeyTotal,
			b.Memo,Customer_ID from (
			SELECT
			O.ID, O.NO, O.INSERT_DATE_TIME, o.Customer_Id,
			O.BALANCE_DATE_TIME, O.SUM_AMOUNT,
			isnull(goo.amount,0) PAID_AMOUNT,
			isnull(spc.ZERO,0) ZERO,
			isnull(spc.CONCESSION,0) Concession,
			isnull(spc.CONCESSION1,0)Concession1,
			isnull(spc.CONCESSION2,0)Concession2
			FROM (
			SELECT ID, NO, INSERT_DATE_TIME, Customer_Id,
			BALANCE_DATE_TIME, SUM_AMOUNT, PAID_AMOUNT, DELETED,
			COMPANY_ID, BRANCH_SHOP_ID FROM dbo.ORDERS
			WHERE Deleted='0'
			<dynamic>
				<isNotNull prepend="And" property="CustomerName">
				  (CUSTOMER_ID in(Select Id from Customer where name like #CustomerName#  and deleted='0'))
				</isNotNull>
				<isNotNull prepend="And" property="BalanceDateTimeString">
				  <![CDATA[ Balance_Date_Time>=#BalanceDateTimeString#]]>
				</isNotNull>
				<isNotNull prepend="And" property="InsertDateTimeString">
			  <![CDATA[Balance_Date_Time<=#InsertDateTimeString#]]>
			</isNotNull>
		  </dynamic>
		  AND (STATUS =#Status#) and Company_Id=#CompanyId# and Branch_Shop_Id=#BranchShopId#
		  and datediff(day,Balance_Date_time,getdate()) $Operator2$  #Days#
		  and Customer_Id in (select Id from Customer where Pay_Type=#PayType#)<!--and Pay_Type=#PayType#-->
			) AS O
			left outer JOIN
			(SELECT  SUM(ISNULL(ZERO, 0)) AS ZERO, SUM(ISNULL(CONCESSION, 0)) AS CONCESSION,sum(ISNULL(CONCESSION1,0)) as CONCESSION1,sum(ISNULL(CONCESSION2,0)) as CONCESSION2, ORDERS_ID FROM
			(SELECT
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION WHERE (CONCESSION_TYPE = #Status1#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS ZERO,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_1 WHERE (CONCESSION_TYPE = #Status2#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_2 WHERE (CONCESSION_TYPE = #Status3#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION1,
			(SELECT SUM(isnull(CONCESSION_AMOUNT,0)) AS SumAmount FROM dbo.PAYMENT_CONCESSION AS PAYMENT_CONCESSION_3 WHERE (CONCESSION_TYPE = #Status4#) AND (GATHERING_ID = dbo.GATHERING.ID)) AS CONCESSION2,
			dbo.GATHERING_ORDERS.ORDERS_ID FROM  dbo.GATHERING_ORDERS INNER JOIN dbo.GATHERING ON dbo.GATHERING_ORDERS.GATHERING_ID = dbo.GATHERING.ID) AS SumPayCon
			GROUP BY ORDERS_ID) AS spc ON spc.ORDERS_ID = O.ID
			left outer  join
			(select go.orders_id,sum(isnull(g.amount,0)) amount from gathering g
			inner join gathering_orders go on g.id=go.gathering_id
			where g.deleted='0'
			and (go.pay_Kind=#LastTelNo# or go.pay_Kind=#LinkManName# or go.pay_kind=#OrderWorking# or go.pay_kind=#Address# or go.pay_kind=#CashName#)<!--付款类型为:预付款冲减和结算款-->
			group by go.orders_id) as goo on goo.orders_id=o.id
			) as a
			right join Customer as b on b.Id=a.Customer_Id
			where (a.sum_amount-a.PAID_AMOUNT-a.ZERO-a.CONCESSION-a.CONCESSION1-a.CONCESSION2)>0
			<!--and b.deleted='0'-->
		  Group by Customer_ID,b.Name,b.Memo
		  ) as l
		  where l.OweMomeyTotal $Operator1$ #Sumamount#
		</select>
		 <select id="GetOrderListByStatus" parameterClass="map" resultMap="OrderResultMap.selectResult">
			 select * from orders where status=#status#
			 and COMPANY_ID=#CompanyId#
			 and BRANCH_SHOP_ID=#BranchShopId#
		 </select>
		<select id="GetOrderItemList" resultMap="GetOrderItemListMap">
			select
			o.Id orderId,pf.[Name] PriceProcessName,o.Member_Card_Id,
			oif.[value] processId,oi.business_type_Id businessTypeId,
			oi.Amount*oi.Unit_Price ItemAmount
			from Orders o
			inner join order_item oi on oi.orders_id=o.Id
			inner join order_item_factor_Value oif on oif.order_item_Id=oi.Id
			inner join factor_value fv on fv.Id=oif.price_factor_Id
			inner join Price_factor pf on pf.Id=oif.price_Factor_Id
			where o.id=#Id# and o.Member_Card_Id is not null
			and o.Deleted='0'
			and o.Company_Id=#CompanyId#
			and o.Branch_Shop_Id=#BranchShopId#
			and pf.Name=#LinkManName#
		</select>
		<update id="UpdateOrderByReturnOrder">
			Update orders
			set Status=#Status#,Not_Pay_Ticket_Amount=#NotPayTicketAmount#,
			Paid_Amount=#PaidAmount#,Paid_Ticket_Amount=#PaidTicketAmount#,
			Real_Paid_Amount=#RealPaidAmount#
			where deleted='0'
			and Id=#Id#
			and COMPANY_ID=#CompanyId#
			and BRANCH_SHOP_ID=#BranchShopId#
			<!--<Dynamic>
				<isNotNull prepend="and" property="Status"></isNotNull>
			</Dynamic>-->
		</update>
		<update id="CancelNotPaidTicket">
			Update orders
			set Paid_Ticket=#PaidTicket#
			where deleted='0'
			and id=#Id#
			and COMPANY_ID=#CompanyId#
			and BRANCH_SHOP_ID=#BranchShopId#
		</update>
	</statements>
</sqlMap>
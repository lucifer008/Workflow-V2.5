<?xml version="1.0" encoding="utf-8"?>
<sqlMap namespace="OrderItem" xmlns="http://ibatis.apache.org/mapping"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:noNamespaceSchemaLocation="SqlMap.xsd">
	<resultMaps>
		<resultMap id="selectResult" class="OrderItem">
			<result property="Id" column="ID" dbType="bigint"/>
			<result property="Name" column="NAME"/>
			<result property="UnitPrice" column="UNIT_PRICE"/>
			<result property="Amount" column="AMOUNT"/>
			<result property="BusinessTypeId" column="business_type_id"/>
			<result property="InsertDateTime" column="Insert_Date_Time"/>
			<result property="Memo" column="MEMO"/>
			<!--single_in-->
			<result property="BusinessType" column="BUSINESS_TYPE_ID" select="BusinessTypeBase.SelectByPk" nullValue="0" lazyLoad="true"/>
		</resultMap>
		<resultMap id="SelectOrderItemResult" class="OrderItem">
			<result property="Id" column="ID" dbType="bigint"/>
			<result property="BusinessTypeId" column="BUSINESS_TYPE_ID"/>
			<result property="NeedRecordMachine" column="NEED_RECORD_MACHINE"/>
			<result property="PriceFactorId" column="PRICE_FACTOR_ID"/>
			<result property="Values" column="VALUE"/>
			<result property="BusinessTypeName" column="BUSINESS_TYPE"/>
			<result property="UnitPrice" column="UNIT_PRICE"/>
			<result property="Amount" column="AMOUNT"/>
			<result property="TargetTable" column="TARGET_TABLE"/>
			<result property="TargetValueColumn" column="Target_value_column"/>
			<result property="TargetTextColumn" column="Target_text_column"/>
			<result property="BusinessTypeId" column="business_type_id"/>
    </resultMap>
		<resultMap id="GetNotFinishedOrderWithInfo" class="OrderItem">
			<result property="Id" column="ID" dbType="bigint" />
			<result property="Name" column="Name" dbType="nvarchar"/>
			<result property="Values" column="VALUE" dbType="nvarchar" />
			<result property="TargetTable" column="TARGET_TABLE" dbType="nvarchar" />
			<result property="DisplayText" column="DISPLAY_TEXT" dbType="nvarchar" />
			<result property="TargetValueColumn" column="TARGET_VALUE_COLUMN" dbType="nvarchar" />
			<result property="TargetTextColumn" column="TARGET_TEXT_COLUMN" dbType="nvarchar" />
		</resultMap>
    <resultMap id="MonthPaper" class="Order">
      <result property="PaidAmount" column="PaidAmount" dbType="decimal"/>
      <result property="AccountReceviableOweMomeyTotal" column="OweMomeyTotal" dbType="decimal"/>
      <result property="NotPayTicketAmount" column="NotPayTicketAmount" dbType="decimal"/>
      <!--<result property="InsertDateTimeString" column="insert_Date_Time" dbType="nvarchar"/>-->
    </resultMap>  
    <resultMap id="SelectCustomerPrepayMap" class="Order">
      <result property="Id" column="Id"/>
      <result property="No" column="No"/>
      <result property="CustomerId" column="Customer_Id"/>
      <result property="CustomerName" column="Customer_Name"/>
      <result property="PrepareMoneyAmount" column="OweMomeyTotal"/>
      <result property="InsertDateTimeString" column="GatheringDateTime"/>
      <result property="Memo" column="Memo" />
    </resultMap>
    <resultMap id="SelectOrderTicketAmountInfoMap" class="Order">
      <result property="Id" column="Id"/>
      <result property="No" column="No"/>
      <result property="CustomerName" column="CustomerName"/>
      <result property="InsertDateTime" column="InsertDateTimeString"/>
      <result property="BalanceDateTime" column="BalanceDateTimeString"/>
      <result property="NotPayTicketAmount" column="Not_Pay_Ticket_Amount"/>
      <result property="CashName" column="CashName"/>
      <result property="PaidTicketAmount" column="Paid_Ticket_Amount"/>
    </resultMap>
		<resultMap id="selectListResult" class="OrderItem">
			<result property="Id" column="ID" dbType="bigint"/>
			<result property="OrdersId" column="ORDERS_ID" dbType="bigint"/>
			<result property="BusinessTypeId" column="BUSINESS_TYPE_ID" dbType="bigint"/>
			<result property="Amount" column="AMOUNT" dbType="decimal"/>
			<result property="Name" column="NAME"/>
			<result property="UnitPrice" column="UNIT_PRICE" dbType="decimal"/>
			<result property="ForecastMoneyAmount" column="FORECAST_MONEY_AMOUNT" dbType="decimal"/>
			<result property="IsUseSavedPaper" column="IS_USE_SAVED_PAPER" dbType="char"/>
			<result property="PaperConsumeCount" column="PAPER_CONSUME_COUNT" dbType="decimal"/>
			<result property="UnitDifferencePrice" column="UNIT_DIFFERENCE_PRICE" dbType="decimal"/>
			<result property="ConsumePaperAmount" column="CONSUME_PAPER_AMOUNT" dbType="decimal"/>
			<result property="CashConsumeCount" column="CASH_CONSUME_COUNT" dbType="decimal"/>
			<result property="CashUnitPrice" column="CASH_UNIT_PRICE" dbType="decimal"/>
			<result property="CashConsumeAmount" column="CASH_CONSUME_AMOUNT" dbType="decimal"/>
			<result property="Deleted" column="DELETED" dbType="char"/>
			<result property="InsertDateTime" column="INSERT_DATE_TIME" dbType="datetime"/>
			<result property="InsertUser" column="INSERT_USER" dbType="bigint"/>
			<result property="UpdateDateTime" column="UPDATE_DATE_TIME" dbType="datetime"/>
			<result property="UpdateUser" column="UPDATE_USER" dbType="bigint"/>
			<result property="Version" column="VERSION" dbType="int"/>
			<result property="CompanyId" column="COMPANY_ID" dbType="bigint"/>
			<result property="BranchShopId" column="BRANCH_SHOP_ID" dbType="bigint"/>
			<result property="Memo" column="MEMO" dbType="nvarchar"/>
			<!--list_out-->
			<result property="PrintRequireDetailList" column="ID" select="OrderItemBase.SelectPrintRequireDetail" nullValue="0" lazyLoad="true"/>
			<!--list_in-->
			<result property="OrderItemFactorValueList" column="ID" select="OrderItemBase.SelectOrderItemFactorValue" nullValue="0" lazyLoad="true"/>
		</resultMap>		
	</resultMaps>
	<statements>
		<select id="SelectOrderItemIDByOrderNo" parameterClass="OrderItem" resultMap="OrderItem.selectResult">
			<![CDATA[
				select OI.ID,bt.name,OI.Unit_Price,OI.Amount,OI.business_type_id,oi.Insert_Date_Time,OI.Memo from  order_Item  as OI
				inner join Orders as O on OI.ORDERS_ID=o.ID
				inner join Business_type bt on OI.Business_type_id=bt.id
				where O.NO=#Values# and OI.Deleted='0' and OI.Company_Id=#CompanyId#
			]]>
			<dynamic>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 OI.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
		</select>
		<update id="UpdateOrderItemForCloseOrder" parameterClass="OrderItem">
			<![CDATA[
			Update Order_Item set PAPER_CONSUME_COUNT=#PaperConsumeCount#,CONSUME_PAPER_AMOUNT=#ConsumePaperAmount#,IS_USE_SAVED_PAPER=#IsUseSavedPaper#,
				UNIT_DIFFERENCE_PRICE=#UnitDifferencePrice#,CASH_CONSUME_COUNT=#CashConsumeCount#,CASH_UNIT_PRICE=#CashUnitPrice#,CASH_CONSUME_AMOUNT=#CashConsumeAmount#
				Where Orders_id=#OrdersId# and Deleted='0' and Company_Id=#CompanyId#
			]]>
			<dynamic>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
		</update>
		<select id="SelectOrderItemFactorValueByOrderNo" parameterClass="OrderItem" resultMap="SelectOrderItemResult">
			<![CDATA[
			select a.id,a.business_type_id,d.need_record_machine,c.price_factor_id,c.value,a.unit_price,a.amount,0 as Trash_Papers,d.name as business_type,e.target_table,e.Target_value_column,e.Target_text_column from order_Item a 
			inner join orders b on a.orders_id=b.id
			inner join order_item_factor_value c on a.id=c.order_item_id
			inner join business_type d on a.business_type_id=d.id
			inner join price_factor e on c.price_factor_id=e.id
			where b.no=#Values# and a.Deleted='0' and a.Company_Id=#CompanyId#
			]]>
			<dynamic>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 a.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
			<![CDATA[
			order by a.id,price_factor_id
			]]>
		</select>
		<select id="SelectOrderItemByOrderNo" parameterClass="OrderItem" resultMap="selectListResult">
			<![CDATA[
			select a.*,bt.Name from order_item a 
			inner join orders b on a.orders_id=b.id
			inner join Business_type bt on a.Business_type_id=bt.id
			where b.no=#Values# and a.Deleted='0' and a.Company_Id=#CompanyId#
			]]>
			<dynamic>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 a.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
		</select>
		<select id="SelectOrderItemCount" parameterClass="OrderItem" resultClass="int">
			<![CDATA[
			select count(*) from Order_Item a 
			inner join orders b  on a.Orders_id=b.id
			where b.no=#Values# and a.deleted='0' and a.Company_Id=#CompanyId#
			]]>
			<dynamic>
				<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
					<![CDATA[
					 a.branch_shop_id=#BranchShopId#
					]]>
				</isNotEqual>
			</dynamic>
		</select>
		<delete id="DeleteOrderItemByOrderNo" parameterClass="OrderItem">
			<![CDATA[
				delete Order_Item
				from
				Order_Item oi
				inner join orders as o on oi.orders_id=o.id
				where o.no=#Values# and oi.deleted='0' and oi.Company_Id=#CompanyId#
			]]>
			<isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
				<![CDATA[
				 Oi.branch_shop_id=#BranchShopId#
				]]>
			</isNotEqual>
		</delete>
		<select id="SelectAmountByOrderId" parameterClass="int" resultClass="decimal">
			<![CDATA[
			select sum(amount) from order_item where orders_id = #Id#
			]]>
		</select>
    
    <!--获取前期和后期的制作人员参与制作工单的明细信息 张晓林 2009年5月11日13:56:08-->
    <select id="GetOrderItemByOrderNo"  parameterClass="OrderItem" resultMap="OrderItem.selectResult">
      <![CDATA[
				select OI.ID,bt.name,OI.Unit_Price,OI.Amount,OI.business_type_id,oi.Insert_Date_Time,OI.Memo from  order_Item  as OI
				inner join Orders as O on OI.ORDERS_ID=o.ID
				inner join Business_type bt on OI.Business_type_id=bt.id
				where O.NO=#Values# and OI.Deleted='0' and OI.Company_Id=#CompanyId#
			]]>
      <dynamic>
        <isNotEqual prepend="and" compareProperty="BranchShopId" compareValue="0">
          <![CDATA[
					 OI.branch_shop_id=#BranchShopId#
					]]>
        </isNotEqual>
        <!-- 张晓林 2009-06-01注释:显示所有工单明细信息
        And OI.Id in(
        select
        order_Item_Id
        from order_Item_employee
        where employee_Id in(select employee_Id from employee_position where (position_Id=#InsertUser# or position_id=#UpdateUser#)
                            )
        )
        -->
      </dynamic>
    </select>

    <!--月报-->
    <!--张晓林 2009年4月13日14:17:45 修正
      以下Sql语句适应：1:抹零/折让；2：舍入；3：混合操作
      款项计算法则如下:
      1.现金=结算款+预付款冲减金额+收了的应收款+会员卡冲减+客户预存款冲减
      2.记账=订单总金额-现金
      3.发票=实付发票金额
    -->
    <select id="SelectMonthPaperPrint" parameterClass="map" resultMap="MonthPaper">
		select Sum(PaidAmount) PaidAmount,Sum(OweMomeyTotal) OweMomeyTotal,sum(NotPayTicketAmount)NotPayTicketAmount from (
		select
		Sum(isnull(g.amount,0)) as PaidAmount,
		max(isnull(e.PAID_TICKET_AMOUNT,0))as NotPayTicketAmount,
		e.insert_Date_Time,Sum(m.OweMomeyTotal) OweMomeyTotal
		from Orders as e
		left join(
		select bb.orders_Id,bb.amount,cc.ConcessionAmount from (
		select
		orders_Id,Sum(isnull(b.Amount,0)) as amount
		from Gathering_Orders as a
		left join Gathering as b on a.Gathering_Id=b.Id
		where b.deleted='0'
		and (a.Pay_Kind=#PayTypeBalance# or a.pay_Kind=#PayTypePreDiff# or a.Pay_Kind=#PayTypeMemberCardDiff# or a.pay_kind=#PreDeposits#) <!--付款类型为结算款+预付款冲减+会员卡冲减-->
		Group by  Orders_Id
		) bb
		left join (
		select aa.Orders_Id,aa.ConcessionAmount from (
		select
		a.Orders_Id,sum(isnull(b.Concession_Amount,0)) as ConcessionAmount
		from Gathering_Orders as a
		left join PayMent_ConCession as b on b.Gathering_Id=a.gathering_Id
		where b.deleted='0'
		and (a.Pay_Kind=#PayTypeBalance# or a.pay_Kind=#PayTypePreDiff# or a.Pay_Kind=#PayTypeMemberCardDiff# or a.pay_kind=#PreDeposits#) <!--付款类型为结算款+预付款冲减+会员卡冲减-->
            Group by a.Orders_Id
            ) aa
          )cc on cc.Orders_Id=bb.Orders_ID
      )as g on e.Id=g.orders_ID
      <!--Start:计算应收款-->
		left join(
		select
		e.Id,(sum(isnull(e.Sum_amount,0))-Sum(isnull(g.amount,0))-Sum(isnull(g.ConcessionAmount,0))) as OweMomeyTotal
		from Orders as e
		left join(
		select bb.orders_Id,bb.amount,cc.ConcessionAmount from (
		select
		orders_Id,Sum(isnull(b.Amount,0)) as amount
		from Gathering_Orders as a
		left join Gathering as b on a.Gathering_Id=b.Id
		where b.deleted='0'
		and (a.Pay_Kind=#PayTypeBalance# or a.pay_Kind=#PayTypePreDiff# or a.Pay_Kind=#PayTypeMemberCardDiff# or a.pay_kind=#PreDeposits#) <!--付款类型为结算款+会员卡冲减+预付款冲减-->
		Group by  Orders_Id
		) bb
		left join (
		select aa.Orders_Id,aa.ConcessionAmount from (
		select
		a.Orders_Id,sum(isnull(b.Concession_Amount,0)) as ConcessionAmount
		from Gathering_Orders as a
		left join PayMent_ConCession as b on b.Gathering_Id=a.gathering_Id
		where b.deleted='0'
		and (a.Pay_Kind=#PayTypeBalance# or a.pay_Kind=#PayTypePreDiff# or a.Pay_Kind=#PayTypeMemberCardDiff# or a.pay_kind=#PreDeposits#) <!--付款类型为结算款+会员卡冲减+预付款冲减-->
					Group by a.Orders_Id
				) aa
			  )cc on cc.Orders_Id=bb.Orders_ID
      )as g on e.Id=g.orders_ID
        where DELETED = '0' and e.Company_Id=#CompanyId# And e.Status=#Status#
        <dynamic>
          <isNotNull prepend="And" property="BranchShopId">
            e.branch_shop_id=#BranchShopId#
          </isNotNull>
          <isNotNull prepend="And" property="BeginHandOverDateTime">
            e.Balance_Date_Time>=#BeginHandOverDateTime#
          </isNotNull>
          <isNotNull prepend="And" property="EndHandOverDateTime">
            <![CDATA[e.Balance_Date_Time<=#EndHandOverDateTime#]]>
          </isNotNull>
        </dynamic>
      group by e.iD
      having (sum(isnull(e.Sum_amount,0))-Sum(isnull(g.amount,0))-Sum(isnull(g.ConcessionAmount,0)))>=0
      ) m on m.Id=e.Id
      <!--End:计算应收款-->
      where DELETED = '0' and e.Company_Id=#CompanyId# And e.Status=#Status#
      <dynamic>
        <isNotNull prepend="And" property="BranchShopId">
          e.branch_shop_id=#BranchShopId#
        </isNotNull>
        <isNotNull prepend="And" property="BeginHandOverDateTime">
          e.Balance_Date_Time>=#BeginHandOverDateTime#
        </isNotNull>
        <isNotNull prepend="And" property="EndHandOverDateTime">
          <![CDATA[e.Balance_Date_Time<=#EndHandOverDateTime#]]>
        </isNotNull>
     </dynamic>
      group by e.insert_Date_Time,e.iD
      )z
    </select>
    
    <!--预付款查询(分页)-->
    <select id="SelectCustomerPrepay" parameterClass="Order" resultMap="SelectCustomerPrepayMap">
      select
      top(#EveryPageCount#)
      k.Id,
      cu.Id as Customer_Id,k.No,
      Max(cu.Name) as Customer_Name,
      Max(cu.Memo) as Memo,g.OweMomeyTotal,
      max(Convert(varchar(100),k.balance_Date_Time,121)) as GatheringDateTime
      from Orders as k
      Inner join Customer as cu on cu.Id=k.Customer_Id
      Inner join(
      select a.Orders_Id,sum(isnull(Amount,0)) as OweMomeyTotal from gathering_Orders a
      Inner join Gathering b on a.Gathering_Id=b.Id
      where b.Deleted='0'
      and a.Pay_kind=#PayType#
      <isNotNull prepend="And" property="BeginBalanceDate">
        b.Gathering_Date_Time>=#BeginBalanceDate#
      </isNotNull>
      <isNotNull prepend="And" property="EndBalanceDate">
        <![CDATA[b.Gathering_Date_Time<=#EndBalanceDate#]]>
      </isNotNull>
      group by a.Orders_Id
      ) g on g.Orders_Id=k.Id
      where k.Deleted='0'
      And K.Company_Id=#CompanyId#
      <![CDATA[and k.Status<>#Status# and k.Status<>#Status1#]]>
      <dynamic>
        <isNotNull prepend="And" property="BranchShopId">
          k.Branch_Shop_Id=#BranchShopId#
        </isNotNull>
        <isNotNull prepend="And" property="No">
          k.No like #No#
        </isNotNull>
        <isNotNull prepend="And" property="CustomerName">
          <![CDATA[ Cu.Name like #CustomerName#]]>
        </isNotNull>
      </dynamic>
      And k.Id not in(
      select top(#CurrentPageIndex#*#EveryPageCount#)
      k.Id
      from Orders as k
      Inner join Customer as cu on cu.Id=k.Customer_Id
      Inner join(
      select a.Orders_Id,sum(isnull(Amount,0)) as OweMomeyTotal from gathering_Orders a
      Inner join Gathering b on a.Gathering_Id=b.Id
      where b.Deleted='0'
      and a.Pay_kind=#PayType#
      <isNotNull prepend="And" property="BeginBalanceDate">
        b.Gathering_Date_Time>=#BeginBalanceDate#
      </isNotNull>
      <isNotNull prepend="And" property="EndBalanceDate">
        <![CDATA[b.Gathering_Date_Time<=#EndBalanceDate#]]>
      </isNotNull>
      group by a.Orders_Id
      ) g on g.Orders_Id=k.Id
      where k.Deleted='0'
      And K.Company_Id=#CompanyId#
      <![CDATA[and k.Status<>#Status# and k.Status<>#Status1#]]>
      <dynamic>
        <isNotNull prepend="And" property="BranchShopId">
          k.Branch_Shop_Id=#BranchShopId#
        </isNotNull>
        <isNotNull prepend="And" property="No">
          k.No like #No#
        </isNotNull>
        <isNotNull prepend="And" property="CustomerName">
          <![CDATA[ Cu.Name like #CustomerName#]]>
        </isNotNull>
      </dynamic>
      Group by cu.Id,k.No,k.Id
      order by k.Id
      )
      Group by cu.Id,k.No,k.Id,g.OweMomeyTotal
      order by k.Id

    </select>
    
    <!--预付款查询(打印)-->
    <select id="SelectCustomerPrepayPrint" parameterClass="Order" resultMap="SelectCustomerPrepayMap">

      select
      k.Id,
      cu.Id as Customer_Id,k.No,
      Max(cu.Name) as Customer_Name,
      Max(cu.Memo) as Memo,g.OweMomeyTotal,
      max(Convert(varchar(100),k.balance_Date_Time,121)) as GatheringDateTime
      from Orders as k
      Inner join Customer as cu on cu.Id=k.Customer_Id
      Inner join(
      select a.Orders_Id,sum(isnull(Amount,0)) as OweMomeyTotal from gathering_Orders a
      Inner join Gathering b on a.Gathering_Id=b.Id
      where b.Deleted='0'
      and a.Pay_kind=#PayType#
      <isNotNull prepend="And" property="BeginBalanceDate">
        b.Gathering_Date_Time>=#BeginBalanceDate#
      </isNotNull>
      <isNotNull prepend="And" property="EndBalanceDate">
        <![CDATA[b.Gathering_Date_Time<=#EndBalanceDate#]]>
      </isNotNull>
      group by a.Orders_Id
      ) g on g.Orders_Id=k.Id
      where k.Deleted='0'
      And K.Company_Id=#CompanyId#
      <![CDATA[and k.Status<>#Status# and k.Status<>#Status1#]]>
      <dynamic>
        <isNotNull prepend="And" property="BranchShopId">
          k.Branch_Shop_Id=#BranchShopId#
        </isNotNull>
        <isNotNull prepend="And" property="No">
          k.No like #No#
        </isNotNull>
        <isNotNull prepend="And" property="CustomerName">
          <![CDATA[ Cu.Name like #CustomerName#]]>
        </isNotNull>
      </dynamic>
      Group by cu.Id,k.No,k.Id,g.OweMomeyTotal
      order by k.Id
    </select>

    <!--统计预付款总条数-->
    <select id="SelectCustomerPrepayRowsCount" parameterClass="Order" resultClass="long">
      select count(*) from (
      select
      cu.Id as Customer_Id,k.No,
      Max(cu.Name) as Customer_Name,
      Max(cu.Memo) as Memo,g.OweMomeyTotal,
      max(k.balance_Date_Time) as GatheringDateTime
      from Orders as k
      Inner join Customer as cu on cu.Id=k.Customer_Id
      Inner join(
      select a.Orders_Id,sum(isnull(Amount,0)) as OweMomeyTotal from gathering_Orders a
      Inner join Gathering b on a.Gathering_Id=b.Id
      where b.Deleted='0'
      and a.Pay_kind=#PayType#
      <isNotNull prepend="And" property="BeginBalanceDate">
          b.Gathering_Date_Time>=#BeginBalanceDate#
        </isNotNull>
      <isNotNull prepend="And" property="EndBalanceDate">
          <![CDATA[b.Gathering_Date_Time<=#EndBalanceDate#]]>
        </isNotNull>
      group by a.Orders_Id
      ) g on g.Orders_Id=k.Id
      where k.Deleted='0'
      And K.Company_Id=#CompanyId#
      <![CDATA[and k.Status<>#Status# and k.Status<>#Status1#]]>
      <dynamic>
        <isNotNull prepend="And" property="BranchShopId">
          k.Branch_Shop_Id=#BranchShopId#
        </isNotNull>
        <isNotNull prepend="And" property="No">
          k.No like #No#
        </isNotNull>
        <isNotNull prepend="And" property="CustomerName">
          <![CDATA[ Cu.Name like #CustomerName#]]>
        </isNotNull>
    </dynamic>
      Group by cu.Id,k.No,g.OweMomeyTotal
      )l
    </select>
    
    <!--根据Order的Id更新工单的状态-->
    <update id="UpdateOrdersStatusById" parameterClass="map">
      Update Orders set Status=#Status# where id=#Id# And Deleted='0'
      <dynamic>
        <isNotNull prepend="AND" property="CompanyId">
          Company_Id=#CompanyId#
        </isNotNull>
        <isNotNull prepend="And" property="BranchShopId">
          branch_shop_id=#BranchShopId#
        </isNotNull>
      </dynamic>
    </update>
    
    <!--按照工单号获取 工单欠票信息(发票领取)-->
    <select id="SelectTicketAmountInfo" parameterClass="Order" resultMap="SelectOrderTicketAmountInfoMap">
      select top(#EveryPageCount#)
      a.Id,a.No,
      a.Insert_Date_Time as InsertDateTimeString,
      a.BALANCE_DATE_TIME as BalanceDateTimeString,
      e.Name as CashName,a.Not_Pay_Ticket_Amount,
      cu.Name as CustomerName,a.Paid_Ticket_Amount
      from orders as a
      Inner join Customer cu on cu.Id=a.Customer_Id
      inner join users u on u.Id=a.cash_User_Id
      inner join Employee e on e.Id=u.Employee_Id
      WHERE a.DELETED = '0' And a.Company_Id=#CompanyId#
      <dynamic>
        <isNotNull prepend="And" property="BranchShopId">
          a.Branch_Shop_Id=#BranchShopId#
        </isNotNull>
        <isNotNull prepend="And" property="Status">
          a.Status=#Status#
        </isNotNull>
        <isNotNull prepend="And" property="No">
          a.No like #No#
        </isNotNull>
        <isNotNull prepend="And" property="Name">
          a.Id=#Name#
        </isNotNull>
        <isNotNull prepend="And" property="PaidTicket">
          a.Paid_Ticket=#PaidTicket#
        </isNotNull>
      </dynamic>
      And a.id not in(
      select top(#CurrentPageIndex#*#EveryPageCount#) a.id
      from orders as a
      inner join users u on u.Id=a.cash_User_Id
      inner join Employee e on e.Id=u.Employee_Id
      WHERE a.DELETED = '0' And a.Company_Id=#CompanyId#
      <dynamic>
        <isNotNull prepend="And" property="BranchShopId">
          a.Branch_Shop_Id=#BranchShopId#
        </isNotNull>
        <isNotNull prepend="And" property="Status">
          a.Status=#Status#
        </isNotNull>
        <isNotNull prepend="And" property="No">
          a.No like #No#
        </isNotNull>
        <isNotNull prepend="And" property="PaidTicket">
          a.Paid_Ticket=#PaidTicket#
        </isNotNull>
        </dynamic>
      order by a.id desc
      )
      order by a.id desc
    </select>
    
    <!--按照工单号获取 工单欠票总数(发票领取)-->
    <select id="SelectTicketAmountInfoTotal" parameterClass="Order" resultClass="long">
      select Count(*) from
      (
      select 
      a.Id,a.No,
      a.Insert_Date_Time as InsertDateTimeString,
      a.BALANCE_DATE_TIME as BalanceDateTimeString,
      e.Name as CashName,a.Not_Pay_Ticket_Amount
      from orders as a
      inner join users u on u.Id=a.cash_User_Id
      inner join Employee e on e.Id=u.Employee_Id
      WHERE a.DELETED = '0' And a.Company_Id=#CompanyId#
      <dynamic>
        <isNotNull prepend="And" property="BranchShopId">
          a.Branch_Shop_Id=#BranchShopId#
        </isNotNull>
        <isNotNull prepend="And" property="Status">
          a.Status=#Status#
        </isNotNull>
        <isNotNull prepend="And" property="No">
          a.No like #No#
        </isNotNull>
        <isNotNull prepend="And" property="PaidTicket">
            a.Paid_Ticket=#PaidTicket#
          </isNotNull>
        </dynamic>
      )m
    </select>
    
    <!--(发票领取)-->
    <update id="UpdateOrdersTicketStatus" parameterClass="Order">
      Update Orders
      set
      Not_Pay_Ticket_Amount=Not_Pay_Ticket_Amount-#NotPayTicketAmount#
      ,PAID_TICKET_AMOUNT=isnull(PAID_TICKET_AMOUNT,0)+#NotPayTicketAmount#
      <isNotNull prepend="," property="PaidTicket">
        Paid_Ticket=#PaidTicket#
      </isNotNull>
      where Deleted='0'
      <dynamic>
        <isNotNull prepend="And" property="Id">
          id=#Id#
        </isNotNull>
        <isNotNull prepend="AND" property="CompanyId">
          Company_Id=#CompanyId#
        </isNotNull>
        <isNotNull prepend="And" property="BranchShopId">
          branch_shop_id=#BranchShopId#
        </isNotNull>
      </dynamic>
    </update>
    
    <select id="SelectCushUserNameByOrderNo" parameterClass="Order" resultClass="string">
      select distinct
      e.cashName
      from orders as a
      Inner join Users as u on u.id=a.Cash_User_Id
      Inner join Employee as em on em.id=u.Employee_Id
      left join(
      select f.Name as CashName,f.id from Employee as f where id in(select b.Employee_Id from Employee_Position as b where b.position_Id
      in(select id from position where id=#Status1#))
      )e on e.Id=em.ID
      where e.CashName is not null
      And a.No=#No# And a.Status=#Status# And a.Company_Id=#CompanyId#  And A.deleted='0'
      <dynamic>
          <isNotNull prepend="And" property="BranchShopId">
            a.Branch_Shop_Id=#BranchShopId#
          </isNotNull>
        </dynamic>
    </select>
	<!--获取未完成的订单及相关价格因素信息 Add Cry-->
	<select id="GetNotFinishedOrderWithInfo" resultMap="GetNotFinishedOrderWithInfo">
		select a.NO NAME,b.ID,c.VALUE ,p.TARGET_TABLE,p.DISPLAY_TEXT,p.TARGET_VALUE_COLUMN,p.TARGET_TEXT_COLUMN from orders a
		inner join order_item b on a.id=b.orders_id
		inner join order_item_factor_value c on b.id=c.order_item_id
		inner join PRICE_FACTOR p on p.id=c.price_factor_id
		order by b.ID ASC
	</select>
	</statements>
</sqlMap>